<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UnitWrappers</name>
    </assembly>
    <members>
        <member name="M:UnitWrappers.EventWrapper`3.Remove(System.EventHandler{`2})">
            <summary>
            
            </summary>
            <param name="listener"></param>
            <returns>True if no listeners remained, false if there are some listeners</returns>
        </member>
        <member name="T:UnitWrappers.IWrap`1">
            <summary>
            Should always be implemented explicitly.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:UnitWrappers.Microsoft.Win32.IRegistry">
            <summary>
            
            </summary>
        </member>
        <member name="M:UnitWrappers.Microsoft.Win32.IRegistryKey.Close">
            <summary>
            Closes the key and flushes it to disk if its contents have been modified.
            </summary>
        </member>
        <member name="T:UnitWrappers.Microsoft.Win32.RegistryKeySystem">
            <summary>
            
            </summary>
        </member>
        <member name="T:UnitWrappers.Microsoft.Win32.RegistryKeyWrap">
            <summary>
            
            </summary>
        </member>
        <member name="T:UnitWrappers.Microsoft.Win32.SafeHandles.ISafeFileHandle">
            <summary>
            Wrapper for <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> class.
            </summary>
        </member>
        <member name="T:UnitWrappers.System.Runtime.InteropServices.ISafeHandle">
            <summary>
            
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Runtime.InteropServices.ISafeHandle.Close">
            <summary>
            Marks the handle for releasing and freeing resources.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Runtime.InteropServices.ISafeHandle.DangerousAddRef(System.Boolean@)">
            <summary>
            Manually increments the reference counter on SafeHandle instances.
            </summary>
            <param name="success">true if the reference counter was successfully incremented; otherwise, false.</param>
        </member>
        <member name="M:UnitWrappers.System.Runtime.InteropServices.ISafeHandle.DangerousGetHandle">
            <summary>
            Returns the value of the handle field. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnitWrappers.System.Runtime.InteropServices.ISafeHandle.DangerousRelease">
            <summary>
            Manually decrements the reference counter on a SafeHandle instance.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Runtime.InteropServices.ISafeHandle.SetHandleAsInvalid">
            <summary>
            Marks a handle as no longer used.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Runtime.InteropServices.ISafeHandle.IsClosed">
            <summary>
            Gets a value indicating whether the handle is closed.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Runtime.InteropServices.ISafeHandle.IsInvalid">
            <summary>
            Gets a value that indicates whether the handle is invalid.
            </summary>
        </member>
        <member name="P:UnitWrappers.Microsoft.Win32.SafeHandles.ISafeFileHandle.UnderlyingObject">
            <summary>
            Gets <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> object.
            </summary>
        </member>
        <member name="T:UnitWrappers.System.Diagnostics.IFileVersionInfoSystem">
            <summary>
            
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.IFileVersionInfoSystem.GetVersionInfo(System.String)">
            <summary>
            Returns a <see cref="T:UnitWrappers.System.Diagnostics.IFileVersionInfo"/> representing the version information associated with the specified file.
            
            </summary>
            
            <returns>
            A <see cref="T:UnitWrappers.System.Diagnostics.IFileVersionInfo"/> containing information about the file. If the file did not contain version information, the <see cref="T:UnitWrappers:System.Diagnostics.IFileVersionInfo"/> contains only the name of the file requested.
            
            </returns>
            <param name="fileName">The fully qualified path and name of the file to retrieve the version information for.
                            </param><exception cref="T:System.IO.FileNotFoundException">The file specified cannot be found.
                            </exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.IFileVersionInfo.Comments">
            <summary>
            Gets the comments associated with the file.
            
            </summary>
            
            <returns>
            The comments associated with the file or null if the file did not contain version information.
            
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.IFileVersionInfo.CompanyName">
            <summary>
            Gets the name of the company that produced the file.
            
            </summary>
            
            <returns>
            The name of the company that produced the file or null if the file did not contain version information.
            
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.IFileVersionInfo.FileBuildPart">
            <summary>
            Gets the build number of the file.
            
            </summary>
            
            <returns>
            A value representing the build number of the file or null if the file did not contain version information.
            
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.IFileVersionInfo.FileDescription">
            <summary>
            Gets the description of the file.
            
            </summary>
            
            <returns>
            The description of the file or null if the file did not contain version information.
            
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.IFileVersionInfo.FileMajorPart">
            <summary>
            Gets the major part of the version number.
            
            </summary>
            
            <returns>
            A value representing the major part of the version number or null if the file did not contain version information.
            
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.IFileVersionInfo.FileMinorPart">
            <summary>
            Gets the minor part of the version number of the file.
            
            </summary>
            
            <returns>
            A value representing the minor part of the version number of the file or null if the file did not contain version information.
            
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.IFileVersionInfo.FileName">
            <summary>
            Gets the name of the file that this instance of <see cref="T:System.Diagnostics.FileVersionInfo"/> describes.
            
            </summary>
            
            <returns>
            The name of the file described by this instance of <see cref="T:System.Diagnostics.FileVersionInfo"/>.
            
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.IFileVersionInfo.FilePrivatePart">
            <summary>
            Gets the file private part number.
            
            </summary>
            
            <returns>
            A value representing the file private part number or null if the file did not contain version information.
            
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.IFileVersionInfo.FileVersion">
            <summary>
            Gets the file version number.
            
            </summary>
            
            <returns>
            The version number of the file or null if the file did not contain version information.
            
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.IFileVersionInfo.InternalName">
            <summary>
            Gets the internal name of the file, if one exists.
            
            </summary>
            
            <returns>
            The internal name of the file. If none exists, this property will contain the original name of the file without the extension.
            
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.IFileVersionInfo.IsDebug">
            <summary>
            Gets a value that specifies whether the file contains debugging information or is compiled with debugging features enabled.
            
            </summary>
            
            <returns>
            true if the file contains debugging information or is compiled with debugging features enabled; otherwise, false.
            
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.IFileVersionInfo.IsPatched">
            <summary>
            Gets a value that specifies whether the file has been modified and is not identical to the original shipping file of the same version number.
            
            </summary>
            
            <returns>
            true if the file is patched; otherwise, false.
            
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.IFileVersionInfo.IsPrivateBuild">
            <summary>
            Gets a value that specifies whether the file was built using standard release procedures.
            
            </summary>
            
            <returns>
            true if the file is a private build; false if the file was built using standard release procedures or if the file did not contain version information.
            
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.IFileVersionInfo.IsPreRelease">
            <summary>
            Gets a value that specifies whether the file is a development version, rather than a commercially released product.
            
            </summary>
            
            <returns>
            true if the file is prerelease; otherwise, false.
            
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.IFileVersionInfo.IsSpecialBuild">
            <summary>
            Gets a value that specifies whether the file is a special build.
            
            </summary>
            
            <returns>
            true if the file is a special build; otherwise, false.
            
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.IFileVersionInfo.Language">
            <summary>
            Gets the default language string for the version info block.
            
            </summary>
            
            <returns>
            The description string for the Microsoft Language Identifier in the version resource or null if the file did not contain version information.
            
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.IFileVersionInfo.LegalCopyright">
            <summary>
            Gets all copyright notices that apply to the specified file.
            
            </summary>
            
            <returns>
            The copyright notices that apply to the specified file.
            
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.IFileVersionInfo.LegalTrademarks">
            <summary>
            Gets the trademarks and registered trademarks that apply to the file.
            
            </summary>
            
            <returns>
            The trademarks and registered trademarks that apply to the file or null if the file did not contain version information.
            
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.IFileVersionInfo.OriginalFilename">
            <summary>
            Gets the name the file was created with.
            
            </summary>
            
            <returns>
            The name the file was created with or null if the file did not contain version information.
            
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.IFileVersionInfo.PrivateBuild">
            <summary>
            Gets information about a private version of the file.
            
            </summary>
            
            <returns>
            Information about a private version of the file or null if the file did not contain version information.
            
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.IFileVersionInfo.ProductBuildPart">
            <summary>
            Gets the build number of the product this file is associated with.
            
            </summary>
            
            <returns>
            A value representing the build number of the product this file is associated with or null if the file did not contain version information.
            
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.IFileVersionInfo.ProductMajorPart">
            <summary>
            Gets the major part of the version number for the product this file is associated with.
            
            </summary>
            
            <returns>
            A value representing the major part of the product version number or null if the file did not contain version information.
            
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.IFileVersionInfo.ProductMinorPart">
            <summary>
            Gets the minor part of the version number for the product the file is associated with.
            
            </summary>
            
            <returns>
            A value representing the minor part of the product version number or null if the file did not contain version information.
            
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.IFileVersionInfo.ProductName">
            <summary>
            Gets the name of the product this file is distributed with.
            
            </summary>
            
            <returns>
            The name of the product this file is distributed with or null if the file did not contain version information.
            
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.IFileVersionInfo.ProductPrivatePart">
            <summary>
            Gets the private part number of the product this file is associated with.
            
            </summary>
            
            <returns>
            A value representing the private part number of the product this file is associated with or null if the file did not contain version information.
            
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.IFileVersionInfo.ProductVersion">
            <summary>
            Gets the version of the product this file is distributed with.
            
            </summary>
            
            <returns>
            The version of the product this file is distributed with or null if the file did not contain version information.
            
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.IFileVersionInfo.SpecialBuild">
            <summary>
            Gets the special build information for the file.
            
            </summary>
            
            <returns>
            The special build information for the file or null if the file did not contain version information.
            
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.FileVersionInfoWrap.ToString">
            <summary>
            Returns a partial list of properties in the <see cref="T:System.Diagnostics.FileVersionInfo"/> and their values.
            
            </summary>
            
            <returns>
            A list of the following properties in this class and their values:
                            <see cref="P:System.Diagnostics.FileVersionInfo.FileName"/>, <see cref="P:System.Diagnostics.FileVersionInfo.InternalName"/>, <see cref="P:System.Diagnostics.FileVersionInfo.OriginalFilename"/>, <see cref="P:System.Diagnostics.FileVersionInfo.FileVersion"/>, <see cref="P:System.Diagnostics.FileVersionInfo.FileDescription"/>, <see cref="P:System.Diagnostics.FileVersionInfo.ProductName"/>, <see cref="P:System.Diagnostics.FileVersionInfo.ProductVersion"/>, <see cref="P:System.Diagnostics.FileVersionInfo.IsDebug"/>, <see cref="P:System.Diagnostics.FileVersionInfo.IsPatched"/>, <see cref="P:System.Diagnostics.FileVersionInfo.IsPreRelease"/>, <see cref="P:System.Diagnostics.FileVersionInfo.IsPrivateBuild"/>, <see cref="P:System.Diagnostics.FileVersionInfo.IsSpecialBuild"/>,
                            <see cref="P:System.Diagnostics.FileVersionInfo.Language"/>.
            
                                If the file did not contain version information, this list will contain only the name of the requested file. Boolean values will be false, and all other entries will be null.
            
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:UnitWrappers.System.Diagnostics.ILocalProcess">
            <summary>
            Delaminates members which can be used only against local processes.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.ILocalProcess.ExitCode">
            <summary>
            Gets the value that the associated process specified when it terminated.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ILocalProcessSystem.GetProcessesByName(System.String)">
            <summary>
            Creates an array of new <see cref="T:UnitWrappers.System.Diagnostics.IProcess"/> components and associates them with all the process resources on the local computer that share the specified process name.
            </summary>
            <param name="processName">The friendly name of the process. </param>
            <returns>An array of type <see cref="T:UnitWrappers.System.Diagnostics.IProcess"/> that represents the process resources running the specified application or file.</returns>
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ILocalProcessSystem.Start(System.String)">
            <summary>
            Starts a process resource by specifying the name of a document or application file and associates the resource with a new <see cref="T:UnitWrappers.System.Diagnostics.IProcess"/> component.
            </summary>
            <param name="fileName">The name of a document or application file to run in the process. </param>
            <returns></returns>
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ILocalProcessSystem.Start(UnitWrappers.System.Diagnostics.IProcessStartInfo)">
            <summary>
            Starts the process resource that is specified by the parameter containing process start information (for example, the file name of the process to start) and associates the resource with a new <see cref="T:UnitWrappers.System.Diagnostics.IProcess"/> component.
            </summary>
            <param name="startInfo">The <see cref="T:UnitWrappers.System.Diagnostics.IProcessStartInfo"/> that contains the information that is used to start the process, including the file name and any command-line arguments</param>
            <returns>A new <see cref="T:UnitWrappers.System.Diagnostics.IProcess"/> component that is associated with the process resource, or null if no process resource is started (for example, if an existing process is reused).</returns>
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ILocalProcessSystem.Start(System.String,System.String)">
            <summary>
            Starts a process resource by specifying the name of an application and a set of command-line arguments, and associates the resource with a new <see cref="T:UnitWrappers.System.Diagnostics.IProcess"/> component.
            </summary>
            <param name="fileName">The name of an application file to run in the process. </param>
            <param name="arguments">Command-line arguments to pass when starting the process. </param>
            <returns>A new <see cref="T:UnitWrappers.System.Diagnostics.IProcess"/> component that is associated with the process, or null, if no process resource is started (for example, if an existing process is reused).</returns>
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ILocalProcessSystem.Start(System.String,System.String,System.Security.SecureString,System.String)">
            <summary>
            Starts a process resource by specifying the name of an application, a user name, a password, and a domain and associates the resource with a new Process component
            </summary>
            <param name="fileName">The name of an application file to run in the process.</param>
            <param name="userName">The user name to use when starting the process.</param>
            <param name="password">A <seealso cref="T:System.Security.SecureString"/> that contains the password to use when starting the process</param>
            <param name="domain">The domain to use when starting the process.</param>
            <returns></returns>
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ILocalProcessSystem.GetProcesses">
            <summary>
            Creates a new <see cref="T:UnitWrappers.System.Diagnostics.IProcess"/> component for each process resource on the local computer.
            </summary>
            <returns>An array of type <see cref="T:UnitWrappers.System.Diagnostics.IProcess"/> that represents all the process resources running on the local computer.</returns>
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ILocalProcessSystem.EnterDebugMode">
            <summary>
            Puts a Process component in state to interact with operating system processes that run in a special mode by enabling the native property SeDebugPrivilege on the current thread.
            </summary>
            <remarks>
            Some operating system processes run in a special mode. Attempting to read properties of or attach to these processes is not possible unless you have called EnterDebugMode on the component. Call <see cref="!:IProcessSystem.LeaveDebugMode"/> when you no longer need access to these processes that run in special mode.
            </remarks>
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ILocalProcessSystem.LeaveDebugMode">
             <summary>
             Takes a Process component out of the state that lets it interact with operating system processes that run in a special mode.
             </summary>
            <remarks>
             Some operating system processes run in a special mode. Attempting to read properties of or attach to these processes is not possible unless you have called <see cref="M:UnitWrappers.System.Diagnostics.ILocalProcessSystem.EnterDebugMode"/> on the component. Call LeaveDebugMode when you no longer need access to these processes that run in special mode.
             </remarks>
        </member>
        <member name="T:UnitWrappers.System.Diagnostics.ITraceSource">
            <summary>
                Provides a set of methods and properties that enable applications to trace
                the execution of code and associate trace messages with their source.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ITraceSource.Close">
            <summary>
             Closes all the trace listeners in the trace listener collection.
             </summary>
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ITraceSource.Flush">
            <summary>Flushes all the trace listeners in the trace listener collection.</summary>
            <exception cref="!:System.ObjectDisposedException">
               An attempt was made to trace an event during finalization.
            </exception>
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ITraceSource.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <summary>
               Writes trace data to the trace listeners in the System.Diagnostics.TraceSource.Listeners
               collection using the specified event type, event identifier, and trace data.
            </summary>
            
            <param name="eventType">One of the System.Diagnostics.TraceEventType values that specifies the event
               type of the trace data.
            </param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="data">The trace data.</param>
            <exception cref="!:System.ObjectDisposedException">
               An attempt was made to trace an event during finalization.
            </exception>
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ITraceSource.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
            <summary>
               Writes trace data to the trace listeners in the System.Diagnostics.TraceSource.Listeners
               collection using the specified event type, event identifier, and trace data
               array.
            </summary>
            
            <param name="eventType">One of the System.Diagnostics.TraceEventType values that specifies the event
               type of the trace data.
            </param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="data">The trace data.</param>
            <exception cref="!:System.ObjectDisposedException">
               An attempt was made to trace an event during finalization.
            </exception>
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ITraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32)">
             <summary>
                Writes a trace event message to the trace listeners in the System.Diagnostics.TraceSource.Listeners
                collection using the specified event type and event identifier.
             </summary>
            Parameters:
              eventType:
             <param name="eventType">One of the System.Diagnostics.TraceEventType values that specifies the event
                type of the trace data.
             </param>
             <param name="id">A numeric identifier for the event.</param>
            
             <exception cref="!:System.ObjectDisposedException">
                An attempt was made to trace an event during finalization.
             </exception>
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ITraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String)">
              <summary>
                 Writes a trace event message to the trace listeners in the System.Diagnostics.TraceSource.Listeners
                 collection using the specified event type, event identifier, and message.
              </summary>
              
              <param name="eventType">One of the System.Diagnostics.TraceEventType values that specifies the event
                 type of the trace data.
              </param>
              <param name="id">A numeric identifier for the event.</param>
             <param name="message">The trace message to write.</param>
            
             <exception cref="!:System.ObjectDisposedException">
                An attempt was made to trace an event during finalization.
             </exception>
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ITraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
               Writes a trace event to the trace listeners in the System.Diagnostics.TraceSource.Listeners
               collection using the specified event type, event identifier, and argument
               array and format.
            </summary>
             
            <param name="eventType">One of the System.Diagnostics.TraceEventType values that specifies the event
               type of the trace data.
            </param>
            <param name="id">A numeric identifier for the event.</param>
            <param name="format">A composite format string that contains text intermixed with zero or more
                format items, which correspond to objects in the args array.
            </param>
            <param name="args">An object array containing zero or more objects to format.</param>
            <exception cref="!:System.ArgumentNullException">format is null.</exception>
            <exception cref="!:System.FormatException">
               format is invalid.-or- The number that indicates an argument to format is
               less than zero, or greater than or equal to the number of specified objects
               to format.
            </exception> 
            <exception cref="!:System.ObjectDisposedException">
               An attempt was made to trace an event during finalization.
            </exception>
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ITraceSource.TraceInformation(System.String)">
            <summary>
               Writes an informational message to the trace listeners in the System.Diagnostics.TraceSource.Listeners
               collection using the specified message.
            </summary>
            <param name="message">The informative message to write.</param>
            <exception cref="!:System.ObjectDisposedException">
               An attempt was made to trace an event during finalization.
            </exception>
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ITraceSource.TraceInformation(System.String,System.Object[])">
            <summary>
               Writes an informational message to the trace listeners in the System.Diagnostics.TraceSource.Listeners
               collection using the specified object array and formatting information.
            </summary>
            <param name="format">A composite format string that contains text intermixed with zero or more
                format items, which correspond to objects in the args array.
            </param>
            <param name="args">An object array containing zero or more objects to format.</param>
            <exception cref="!:System.ArgumentNullException">format is null.</exception>
            <exception cref="!:System.FormatException">
               format is invalid.-or- The number that indicates an argument to format is
               less than zero, or greater than or equal to the number of specified objects
               to format.
            </exception> 
            <exception cref="!:System.ObjectDisposedException">
               An attempt was made to trace an event during finalization.
            </exception>
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ITraceSource.TraceTransfer(System.Int32,System.String,System.Guid)">
            <param name="id">A numeric identifier for the event.</param>
            <param name="message">The trace message to write.</param>
            <param name="relatedActivityId">A System.Guid structure that identifies the related activity.</param>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.ITraceSource.Attributes">
            <summary>
                Gets the custom switch attributes defined in the application configuration
                file.
            </summary>
            <returns>A System.Collections.Specialized.StringDictionary containing the custom attributes
               for the trace switch.
            </returns>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.ITraceSource.Listeners">
            <summary>
                Gets the collection of trace listeners for the trace source.
            </summary>
            <returns>A System.Diagnostics.TraceListenerCollection that contains the active trace
                listeners associated with the source.</returns>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.ITraceSource.Name">
            <summary>
                Gets the name of the trace source.
            </summary>
            <returns>The name of the trace source.</returns>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.ITraceSource.Switch">
             <summary>
                 Gets or sets the source switch value.
             </summary>
             <returns>A System.Diagnostics.SourceSwitch object representing the source switch value.</returns>
            
            <exception cref="!:System.ArgumentNullException">
                System.Diagnostics.TraceSource.Switch is set to null.
             </exception>   
        </member>
        <member name="T:UnitWrappers.System.Diagnostics.TraceSourceWrap">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.TraceSourceWrap.Close">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.TraceSourceWrap.Flush">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.TraceSourceWrap.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.TraceSourceWrap.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.TraceSourceWrap.TraceEvent(System.Diagnostics.TraceEventType,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.TraceSourceWrap.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.TraceSourceWrap.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.TraceSourceWrap.TraceInformation(System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.TraceSourceWrap.TraceInformation(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.TraceSourceWrap.TraceTransfer(System.Int32,System.String,System.Guid)">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.TraceSourceWrap.Attributes">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.TraceSourceWrap.Listeners">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.TraceSourceWrap.Name">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.TraceSourceWrap.Switch">
            <inheritdoc />
        </member>
        <member name="T:UnitWrappers.System.IO.BinaryReaderWrap">
            <summary>
            Wrapper for <see cref="T:System.IO.BinaryReader"/> class.
            </summary>
        </member>
        <member name="T:UnitWrappers.System.IO.IBinaryReader">
            <summary>
            Wrapper for <see cref="T:System.IO.BinaryReader"/> class.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryReader.Close">
            <summary>
            Closes the current reader and the underlying stream. 
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryReader.PeekChar">
            <summary>
            Returns the next available character and does not advance the byte or character position.
            </summary>
            <returns>The next available character, or -1 if no more characters are available or the stream does not support seeking. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryReader.Read">
            <summary>
            Reads characters from the underlying stream and advances the current position of the stream in accordance with the Encoding used and the specific character being read from the stream.
            </summary>
            <returns>The next character from the input stream, or -1 if no characters are currently available.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads count bytes from the stream with index as the starting point in the byte array.
            </summary>
            <param name="buffer">The buffer to read data into.</param>
            <param name="index">The starting point in the buffer at which to begin reading into the buffer.</param>
            <param name="count">The number of characters to read.</param>
            <returns></returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryReader.Read(System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads count characters from the stream with index as the starting point in the character array.
            </summary>
            <param name="buffer">The buffer to read data into.</param>
            <param name="index">The starting point in the buffer at which to begin reading into the buffer.</param>
            <param name="count">The number of characters to read.</param>
            <returns>The total number of characters read into the buffer. This might be less than the number of characters requested if that many characters are not currently available, or it might be zero if the end of the stream is reached.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryReader.ReadBoolean">
            <summary>
            Reads a Boolean value from the current stream and advances the current position of the stream by one byte.
            </summary>
            <returns> true if the byte is nonzero; otherwise, false.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryReader.ReadByte">
            <summary>
            Reads the next byte from the current stream and advances the current position of the stream by one byte.
            </summary>
            <returns>The next byte read from the current stream.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryReader.ReadBytes(System.Int32)">
            <summary>
            Reads count bytes from the current stream into a byte array and advances the current position by count bytes. 
            </summary>
            <param name="count">The number of bytes to read.</param>
            <returns>A byte array containing data read from the underlying stream. This might be less than the number of bytes requested if the end of the stream is reached.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryReader.ReadChar">
            <summary>
            Reads the next character from the current stream and advances the current position of the stream in accordance with the Encoding used and the specific character being read from the stream. 
            </summary>
            <returns>A character read from the current stream.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryReader.ReadChars(System.Int32)">
            <summary>
            Reads count characters from the current stream, returns the data in a character array, and advances the current position in accordance with the Encoding used and the specific character being read from the stream.
            </summary>
            <param name="count">The number of characters to read.</param>
            <returns>A character array containing data read from the underlying stream. This might be less than the number of characters requested if the end of the stream is reached.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryReader.ReadDecimal">
            <summary>
            Reads a decimal value from the current stream and advances the current position of the stream by sixteen bytes.
            </summary>
            <returns>A decimal value read from the current stream.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryReader.ReadDouble">
            <summary>
            Reads an 8-byte floating point value from the current stream and advances the current position of the stream by eight bytes.
            </summary>
            <returns>An 8-byte floating point value read from the current stream.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryReader.ReadInt16">
            <summary>
            Reads a 2-byte signed integer from the current stream and advances the current position of the stream by two bytes.
            </summary>
            <returns>A 2-byte signed integer read from the current stream.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryReader.ReadInt32">
            <summary>
            Reads a 4-byte signed integer from the current stream and advances the current position of the stream by four bytes.
            </summary>
            <returns>A 4-byte signed integer read from the current stream. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryReader.ReadInt64">
            <summary>
            Reads an 8-byte signed integer from the current stream and advances the current position of the stream by eight bytes.
            </summary>
            <returns>An 8-byte signed integer read from the current stream.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryReader.ReadSByte">
            <summary>
            Reads a signed byte from this stream and advances the current position of the stream by one byte.
            </summary>
            <returns>A signed byte read from the current stream.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryReader.ReadSingle">
            <summary>
            Reads a 4-byte floating point value from the current stream and advances the current position of the stream by four bytes.
            </summary>
            <returns>A 4-byte floating point value read from the current stream.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryReader.ReadString">
            <summary>
            Reads a string from the current stream. The string is prefixed with the length, encoded as an integer seven bits at a time.
            </summary>
            <returns>The string being read.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryReader.ReadUInt16">
            <summary>
            Reads a 2-byte unsigned integer from the current stream using little-endian encoding and advances the position of the stream by two bytes
            </summary>
            <returns>A 2-byte unsigned integer read from this stream.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryReader.ReadUInt32">
            <summary>
            Reads a 4-byte unsigned integer from the current stream and advances the position of the stream by four bytes.
            </summary>
            <returns>A 4-byte unsigned integer read from this stream.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryReader.ReadUInt64">
            <summary>
            Reads an 8-byte unsigned integer from the current stream and advances the position of the stream by eight bytes.
            </summary>
            <returns>An 8-byte unsigned integer read from this stream.</returns>
        </member>
        <member name="P:UnitWrappers.System.IO.IBinaryReader.BinaryReaderInstance">
            <summary>
            Gets <see cref="T:System.IO.BinaryReader"/> object.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IBinaryReader.BaseStream">
            <summary>
            Exposes access to the underlying stream of the BinaryReader.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.BinaryReaderWrap.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.IO.BinaryReaderWrap"/> class on the specified path. 
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> object.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.BinaryReaderWrap.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the BinaryReader class based on the supplied stream and using UTF8Encoding. 
            </summary>
            <param name="input">A <see cref="T:System.IO.Stream"/> object.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.BinaryReaderWrap.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the BinaryReader class based on the supplied stream and a specific character encoding.
            </summary>
            <param name="stream">The supplied stream.</param>
            <param name="encoding">The character encoding.</param>
        </member>
        <member name="T:UnitWrappers.System.IO.BinaryWriterWrap">
            <summary>
            Wrapper for <see cref="T:System.IO.BinaryWriter"/> class.
            </summary>
        </member>
        <member name="T:UnitWrappers.System.IO.IBinaryWriter">
            <summary>
            Wrapper for <see cref="T:System.IO.BinaryWriter"/> class.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryWriter.Close">
            <summary>
            Closes the current BinaryWriter and the underlying stream. 
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryWriter.Flush">
            <summary>
            Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryWriter.Seek(System.Int32,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to origin.</param>
            <param name="origin">A field of SeekOrigin indicating the reference point from which the new position is to be obtained.</param>
            <returns>The position with the current stream.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryWriter.Write(System.Boolean)">
            <summary>
            Writes a one-byte Boolean value to the current stream, with 0 representing false and 1 representing true.
            </summary>
            <param name="value">The Boolean value to write (0 or 1).</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryWriter.Write(System.Byte)">
            <summary>
            Writes an unsigned byte to the current stream and advances the stream position by one byte.
            </summary>
            <param name="value">The unsigned byte to write.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryWriter.Write(System.Byte[])">
            <summary>
            Writes a byte array to the underlying stream. 
            </summary>
            <param name="buffer">A byte array containing the data to write. </param>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryWriter.Write(System.Char)">
            <summary>
            Writes a Unicode character to the current stream and advances the current position of the stream in accordance with the Encoding used and the specific characters being written to the stream.
            </summary>
            <param name="ch">The non-surrogate, Unicode character to write. </param>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryWriter.Write(System.Char[])">
            <summary>
            Writes a character array to the current stream and advances the current position of the stream in accordance with the Encoding used and the specific characters being written to the stream.
            </summary>
            <param name="chars">A character array containing the data to write.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryWriter.Write(System.Decimal)">
            <summary>
            Writes a decimal value to the current stream and advances the stream position by sixteen bytes.
            </summary>
            <param name="value">The decimal value to write.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryWriter.Write(System.Double)">
            <summary>
            Writes an eight-byte floating-point value to the current stream and advances the stream position by eight bytes.
            </summary>
            <param name="value">The eight-byte floating-point value to write.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryWriter.Write(System.Int16)">
            <summary>
            Writes a two-byte signed integer to the current stream and advances the stream position by two bytes.
            </summary>
            <param name="value">The two-byte signed integer to write.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryWriter.Write(System.Int32)">
            <summary>
            Writes a four-byte signed integer to the current stream and advances the stream position by four bytes. 
            </summary>
            <param name="value">The four-byte signed integer to write.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryWriter.Write(System.Int64)">
            <summary>
            Writes an eight-byte signed integer to the current stream and advances the stream position by eight bytes.
            </summary>
            <param name="value">The eight-byte signed integer to write.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryWriter.Write(System.SByte)">
            <summary>
            Writes a signed byte to the current stream and advances the stream position by one byte.
            </summary>
            <param name="value">The signed byte to write.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryWriter.Write(System.Single)">
            <summary>
            Writes a four-byte floating-point value to the current stream and advances the stream position by four bytes.
            </summary>
            <param name="value">The four-byte floating-point value to write.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryWriter.Write(System.String)">
            <summary>
            Writes a length-prefixed string to this stream in the current encoding of the BinaryWriter, and advances the current position of the stream in accordance with the encoding used and the specific characters being written to the stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryWriter.Write(System.UInt16)">
            <summary>
            Writes a two-byte unsigned integer to the current stream and advances the stream position by two bytes.
            </summary>
            <param name="value">The two-byte unsigned integer to write.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryWriter.Write(System.UInt32)">
            <summary>
            Writes a four-byte unsigned integer to the current stream and advances the stream position by four bytes.
            </summary>
            <param name="value">The four-byte unsigned integer to write.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryWriter.Write(System.UInt64)">
            <summary>
            Writes an eight-byte unsigned integer to the current stream and advances the stream position by eight bytes.
            </summary>
            <param name="value">The eight-byte unsigned integer to write.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a region of a byte array to the current stream.
            </summary>
            <param name="buffer">A byte array containing the data to write.</param>
            <param name="index">The starting point in buffer at which to begin writing.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IBinaryWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a section of a character array to the current stream, and advances the current position of the stream in accordance with the Encoding used and perhaps the specific characters being written to the stream.
            </summary>
            <param name="chars">A character array containing the data to write.</param>
            <param name="index">The starting point in buffer at which to begin writing.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="P:UnitWrappers.System.IO.IBinaryWriter.BaseStream">
            <summary>
            Gets the underlying stream of the BinaryWriter.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IBinaryWriter.BinaryWriterInstance">
            <summary>
            Gets <see cref="T:System.IO.BinaryWriter"/> object.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.BinaryWriterWrap.#ctor(System.IO.BinaryWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.IO.BinaryWriterWrap"/> class on the specified path. 
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> object.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.BinaryWriterWrap.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the BinaryWriterWrap class based on the supplied stream and using UTF-8 as the encoding for strings.
            </summary>
            <param name="output">The output stream.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.BinaryWriterWrap.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the BinaryWriterWrap class based on the supplied stream and a specific character encoding.
            </summary>
            <param name="output">The supplied stream.</param>
            <param name="encoding">The character encoding.</param>
        </member>
        <member name="T:UnitWrappers.System.IO.Compression.DeflateStreamWrap">
            <summary>
            Description of DeflateStreamWrap.
            </summary>
        </member>
        <member name="T:UnitWrappers.System.IO.Compression.IDeflateStream">
            <summary>
            Description of IDeflateStream.
            </summary>
        </member>
        <member name="T:UnitWrappers.System.IO.IStream">
            <summary>
            Description of IStream.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.IStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous read operation. 
            </summary>
            <param name="buffer">The buffer to read the data into. </param>
            <param name="offset">The byte offset in buffer at which to begin writing data read from the stream. </param>
            <param name="count">The maximum number of bytes to read. </param>
            <param name="callback">An optional asynchronous callback, to be called when the read is complete. </param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests. </param>
            <returns>An IAsyncResult that represents the asynchronous read, which could still be pending. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous write operation. 
            </summary>
            <param name="buffer">The buffer to write data from. </param>
            <param name="offset">The byte offset in buffer from which to begin writing. </param>
            <param name="count">The maximum number of bytes to write. </param>
            <param name="callback">An optional asynchronous callback, to be called when the write is complete. </param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests.</param>
            <returns>An IAsyncResult that represents the asynchronous write, which could still be pending. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IStream.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. 
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.IStream.EndRead(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous read to complete. 
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to finish. </param>
            <returns>The number of bytes read from the stream, between zero (0) and the number of bytes you requested. Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IStream.EndWrite(System.IAsyncResult)">
            <summary>
            Ends an asynchronous write operation. 
            </summary>
            <param name="asyncResult">A reference to the outstanding asynchronous I/O request. </param>
        </member>
        <member name="M:UnitWrappers.System.IO.IStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.IStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. </param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream. </param>
            <param name="count">The maximum number of bytes to be read from the current stream. </param>
            <returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IStream.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream. 
            </summary>
            <returns>The unsigned byte cast to an Int32, or -1 if at the end of the stream.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream. 
            </summary>
            <param name="offset">A byte offset relative to the origin parameter. </param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position. </param>
            <returns>The new position within the current stream. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream. 
            </summary>
            <param name="value">The desired length of the current stream in bytes. </param>
        </member>
        <member name="M:UnitWrappers.System.IO.IStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream. </param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream. </param>
            <param name="count">The number of bytes to be written to the current stream. </param>
        </member>
        <member name="M:UnitWrappers.System.IO.IStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and advances the position within the stream by one byte. 
            </summary>
            <param name="value">The byte to write to the stream. </param>
        </member>
        <member name="P:UnitWrappers.System.IO.IStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IStream.CanTimeout">
            <summary>
            Gets a value that determines whether the current stream can time out. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IStream.ReadTimeout">
            <summary>
            Gets or sets a value, in milliseconds, that determines how long the stream will attempt to read before timing out. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IStream.WriteTimeout">
            <summary>
            Gets or sets a value, in milliseconds, that determines how long the stream will attempt to write before timing out. 
            </summary>
        </member>
        <member name="T:UnitWrappers.System.IO.IFileStream">
            <summary>
            Wrapper for <see cref="T:System.IO.FileStream"/> class.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.IFileStream.Flush(System.Boolean)">
            <summary>
            Clears buffers for this stream and causes any buffered data to be written to the file, and also clears all intermediate file buffers.
            </summary>
            <param name="flushToDisk">true to flush all intermediate file buffers; otherwise, false. </param>
        </member>
        <member name="M:UnitWrappers.System.IO.IFileStream.Lock(System.Int64,System.Int64)">
            <summary>
            Prevents other processes from changing the FileStream while permitting read access. 
            </summary>
            <param name="position">The beginning of the range to lock. The value of this parameter must be equal to or greater than zero (0). </param>
            <param name="length">The range to be locked. </param>
        </member>
        <member name="M:UnitWrappers.System.IO.IFileStream.GetAccessControl">
            <summary>
            Gets a IFileSecurity object that encapsulates the access control list (ACL) entries for the file described by the current FileStream object. 
            </summary>
            <returns>A IFileSecurity object that encapsulates the access control settings for the file described by the current FileStream object. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFileStream.SetAccessControl(UnitWrappers.System.Security.AccessControl.IFileSecurity)">
            <summary>
            Applies access control list (ACL) entries described by a IFileSecurity object to the file described by the current FileStream object. 
            </summary>
            <param name="fileSecurity">A IFileSecurity object that describes an ACL entry to apply to the current file.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IFileStream.ToString">
            <summary>
            Returns a String that represents the current Object. 
            </summary>
            <returns>A String that represents the current Object. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFileStream.Unlock(System.Int64,System.Int64)">
            <summary>
            Allows access by other processes to all or part of a file that was previously locked.
            </summary>
            <param name="position">The beginning of the range to unlock.</param>
            <param name="length">The range to be unlocked.</param>
        </member>
        <member name="P:UnitWrappers.System.IO.IFileStream.IsAsync">
            <summary>
            Gets a value indicating whether the FileStream was opened asynchronously or synchronously.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IFileStream.Name">
            <summary>
            Gets the name of the FileStreamBase that was passed to the constructor.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IFileStream.SafeFileHandle">
            <summary>
            Gets a ISafeFileHandle object that represents the operating system file handle for the file that the current FileStream object encapsulates. 
            </summary>
        </member>
        <member name="T:UnitWrappers.System.IO.IMemoryStream">
            <summary>
            Wrapper for <see cref="T:System.IO.MemoryStream"/> class.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.IMemoryStream.GetBuffer">
            <summary>
            Returns the array of unsigned bytes from which this stream was created. 
            </summary>
            <returns>The byte array from which this stream was created, or the underlying array if a byte array was not provided to the MemoryStream constructor during construction of the current instance.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IMemoryStream.ToArray">
            <summary>
            Writes the stream contents to a byte array, regardless of the Position property. 
            </summary>
            <returns>A new byte array.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IMemoryStream.WriteTo(System.IO.Stream)">
            <summary>
            Writes the entire contents of this memory stream to another stream. 
            </summary>
            <param name="stream">The stream to write this memory stream to.</param>
        </member>
        <member name="P:UnitWrappers.System.IO.IMemoryStream.Capacity">
            <summary>
            Gets or sets the number of bytes allocated for this stream. 
            </summary>
        </member>
        <member name="T:UnitWrappers.System.IO.IStreamReader">
            <summary>
            Wrapper for <see cref="T:System.IO.StreamReader"/> class.
            </summary>
        </member>
        <member name="T:UnitWrappers.System.IO.ITextReader">
            <summary>
            Description of ITextReader.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextReader.Close">
            <summary>
            Closes the IStreamReader object and the underlying stream, and releases any system resources associated with the reader.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextReader.Peek">
            <summary>
            Reads the next character without changing the state of the reader or the character source. Returns the next available character without actually reading it from the input stream.
            </summary>
            <returns>An integer representing the next character to be read, or -1 if no more characters are available or the stream does not support seeking.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextReader.Read">
            <summary>
            Reads the next character from the input stream and advances the character position by one character. 
            </summary>
            <returns>The next character from the input stream represented as an Int32 object, or -1 if no more characters are available.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextReader.Read(System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a maximum of count characters from the current stream and writes the data to buffer, beginning at index. 
            </summary>
            <param name="buffer">When this method returns, contains the specified character array with the values between index and (index + count - 1) replaced by the characters read from the current source.</param>
            <param name="index">The place in buffer at which to begin writing.</param>
            <param name="count">The maximum number of characters to read. If the end of the stream is reached before count of characters is read into buffer, the current method returns.</param>
            <returns>The number of characters that have been read. The number will be less than or equal to count, depending on whether the data is available within the stream. This method returns zero if called when no more characters are left to read.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a maximum of count characters from the current stream, and writes the data to buffer, beginning at index. 
            </summary>
            <param name="buffer">When this method returns, this parameter contains the specified character array with the values between index and (index + count -1) replaced by the characters read from the current source.</param>
            <param name="index">The place in buffer at which to begin writing.</param>
            <param name="count">The maximum number of characters to read. </param>
            <returns>The position of the underlying stream is advanced by the number of characters that were read into buffer.
            The number of characters that have been read. The number will be less than or equal to count, depending on whether all input characters have been read. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextReader.ReadLine">
            <summary>
            Reads a line of characters from the current stream and returns the data as a string.
            </summary>
            <returns>The next line from the input stream, or nullNothingnullptra null reference (Nothing in Visual Basic) if the end of the input stream is reached.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextReader.ReadToEnd">
            <summary>
            Reads all characters from the current position to the end of the ITextReader and returns them as one string. 
            </summary>
            <returns>A string containing all characters from the current position to the end of the ITextReader.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IStreamReader.DiscardBufferedData">
            <summary>
            Allows a IStreamReader object to discard its current data. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IStreamReader.BaseStream">
            <summary>
            Returns the underlying stream. 
            </summary>
            <value>The underlying stream.</value>
        </member>
        <member name="P:UnitWrappers.System.IO.IStreamReader.CurrentEncoding">
            <summary>
            Gets the current character encoding that the current IStreamReader object is using. 
            </summary>
            <value>The current character encoding used by the current reader. The value can be different after the first call to any Read method of IStreamReader, since encoding autodetection is not done until the first call to a Read method. </value>
        </member>
        <member name="P:UnitWrappers.System.IO.IStreamReader.EndOfStream">
            <summary>
            Gets a value that indicates whether the current stream position is at the end of the stream. 
            </summary>
            <value> true if the current stream position is at the end of the stream; otherwise false. </value>
        </member>
        <member name="M:UnitWrappers.System.IO.IStreamSystem.Synchronized(System.IO.Stream)">
            <summary>
            Creates a thread-safe (synchronized) wrapper around the specified <see cref="T:System.IO.Stream"/> object.
            
            </summary>
            
            <returns>
            A thread-safe <see cref="T:System.IO.Stream"/> object.
            
            </returns>
            <param name="stream">The <see cref="T:System.IO.Stream"/> object to synchronize.
                            </param><exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.
                            </exception>
        </member>
        <member name="T:UnitWrappers.System.IO.IStreamWriter">
            <summary>
            Wrapper for <see cref="T:System.IO.StreamWriter"/> class.
            </summary>
        </member>
        <member name="T:UnitWrappers.System.IO.ITextWriter">
            <summary>
            
            </summary>
            <remarks>
            <see cref="T:System.IO.TextWriter"/> does not provides virtual <see cref="M:System.IDisposable.Dispose"/>
            </remarks>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextWriter.Close">
            <summary>
            Closes the current writer and releases any system resources associated with the writer.
            </summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextWriter.Flush">
            <summary>
            Clears all buffers for the current writer and causes any buffered data to be written to the underlying device.
            </summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextWriter.Write(System.Char)">
            <summary>
            Writes a character to the text stream.
            </summary>
            <param name="value">The character to write to the text stream. </param><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextWriter.Write(System.Char[])">
            <summary>
            Writes a character array to the text stream.
            </summary>
            <param name="buffer">The character array to write to the text stream. </param><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a subarray of characters to the text stream.
            </summary>
            <param name="buffer">The character array to write data from. </param><param name="index">Starting index in the buffer. </param><param name="count">The number of characters to write. </param><exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index"/> is less than <paramref name="count"/>. </exception><exception cref="T:System.ArgumentNullException">The <paramref name="buffer"/> parameter is null. </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> or <paramref name="count"/> is negative. </exception><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextWriter.Write(System.Boolean)">
            <summary>
            Writes the text representation of a Boolean value to the text stream.
            </summary>
            <param name="value">The Boolean to write. </param><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextWriter.Write(System.Int32)">
            <summary>
            Writes the text representation of a 4-byte signed integer to the text stream.
            </summary>
            <param name="value">The 4-byte signed integer to write. </param><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextWriter.Write(System.Int64)">
            <summary>
            Writes the text representation of an 8-byte signed integer to the text stream.
            </summary>
            <param name="value">The 8-byte signed integer to write. </param><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextWriter.Write(System.UInt32)">
            <summary>
            Writes the text representation of a 4-byte unsigned integer to the text stream.
            </summary>
            <param name="value">The 4-byte unsigned integer to write. </param><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextWriter.Write(System.UInt64)">
            <summary>
            Writes the text representation of an 8-byte unsigned integer to the text stream.
            </summary>
            <param name="value">The 8-byte unsigned integer to write. </param><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextWriter.WriteLine(System.UInt32)">
            <summary>
            Writes the text representation of a 4-byte unsigned integer followed by a line terminator to the text stream.
            </summary>
            <param name="value">The 4-byte unsigned integer to write. </param><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextWriter.WriteLine(System.UInt64)">
            <summary>
            Writes the text representation of an 8-byte unsigned integer followed by a line terminator to the text stream.
            </summary>
            <param name="value">The 8-byte unsigned integer to write. </param><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextWriter.Write(System.Single)">
            <summary>
            Writes the text representation of a 4-byte floating-point value to the text stream.
            </summary>
            <param name="value">The 4-byte floating-point value to write. </param><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextWriter.Write(System.Double)">
            <summary>
            Writes the text representation of an 8-byte floating-point value to the text stream.
            </summary>
            <param name="value">The 8-byte floating-point value to write. </param><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextWriter.Write(System.Decimal)">
            <summary>
            Writes the text representation of a decimal value to the text stream.
            </summary>
            <param name="value">The decimal value to write. </param><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextWriter.Write(System.String)">
            <summary>
            Writes a string to the text stream.
            </summary>
            <param name="value">The string to write. </param><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextWriter.Write(System.Object)">
            <summary>
            Writes the text representation of an object to the text stream by calling ToString on that object.
            </summary>
            <param name="value">The object to write. </param><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextWriter.Write(System.String,System.Object)">
            <summary>
            Writes out a formatted string, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)"/>.
            </summary>
            <param name="format">The formatting string. </param><param name="arg0">An object to write into the formatted string. </param><exception cref="T:System.ArgumentNullException"><paramref name="format"/> is null. </exception><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.FormatException">The format specification in format is invalid.-or- The number indicating an argument to be formatted is less than zero, or larger than or equal to the number of provided objects to be formatted. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextWriter.Write(System.String,System.Object,System.Object)">
            <summary>
            Writes out a formatted string, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)"/>.
            </summary>
            <param name="format">The formatting string. </param><param name="arg0">An object to write into the formatted string. </param><param name="arg1">An object to write into the formatted string. </param><exception cref="T:System.ArgumentNullException"><paramref name="format"/> is null. </exception><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.FormatException">The format specification in format is invalid.-or- The number indicating an argument to be formatted is less than zero, or larger than or equal to the number of provided objects to be formatted. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextWriter.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes out a formatted string, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)"/>.
            </summary>
            <param name="format">The formatting string. </param><param name="arg0">An object to write into the formatted string. </param><param name="arg1">An object to write into the formatted string. </param><param name="arg2">An object to write into the formatted string. </param><exception cref="T:System.ArgumentNullException"><paramref name="format"/> is null. </exception><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.FormatException">The format specification in format is invalid.-or- The number indicating an argument to be formatted is less than zero, or larger than or equal to the number of provided objects to be formatted. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextWriter.Write(System.String,System.Object[])">
            <summary>
            Writes out a formatted string, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)"/>.
            </summary>
            <param name="format">The formatting string. </param><param name="arg">The object array to write into the formatted string. </param><exception cref="T:System.ArgumentNullException"><paramref name="format"/> or <paramref name="arg"/> is null. </exception><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.FormatException">The format specification in format is invalid.-or- The number indicating an argument to be formatted is less than zero, or larger than or equal to <paramref name="arg"/>. Length. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextWriter.WriteLine">
            <summary>
            Writes a line terminator to the text stream.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextWriter.WriteLine(System.Char)">
            <summary>
            Writes a character followed by a line terminator to the text stream.
            </summary>
            <param name="value">The character to write to the text stream. </param><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextWriter.WriteLine(System.Char[])">
            <summary>
            Writes an array of characters followed by a line terminator to the text stream.
            </summary>
            <param name="buffer">The character array from which data is read. </param><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a subarray of characters followed by a line terminator to the text stream.
            </summary>
            <param name="buffer">The character array from which data is read. </param><param name="index">The index into <paramref name="buffer"/> at which to begin reading. </param><param name="count">The maximum number of characters to write. </param><exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index"/> is less than <paramref name="count"/>. </exception><exception cref="T:System.ArgumentNullException">The <paramref name="buffer"/> parameter is null. </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> or <paramref name="count"/> is negative. </exception><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextWriter.WriteLine(System.Boolean)">
            <summary>
            Writes the text representation of a Boolean followed by a line terminator to the text stream.
            </summary>
            <param name="value">The Boolean to write. </param><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextWriter.WriteLine(System.Int32)">
            <summary>
            Writes the text representation of a 4-byte signed integer followed by a line terminator to the text stream.
            </summary>
            <param name="value">The 4-byte signed integer to write. </param><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextWriter.WriteLine(System.Int64)">
            <summary>
            Writes the text representation of an 8-byte signed integer followed by a line terminator to the text stream.
            </summary>
            <param name="value">The 8-byte signed integer to write. </param><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextWriter.WriteLine(System.String)">
            <summary>
            Writes a string followed by a line terminator to the text stream.
            </summary>
            <param name="value">The string to write. If <paramref name="value"/> is null, only the line termination characters are written. </param><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextWriter.WriteLine(System.Object)">
            <summary>
            Writes the text representation of an object by calling ToString on this object, followed by a line terminator to the text stream.
            </summary>
            <param name="value">The object to write. If <paramref name="value"/> is null, only the line termination characters are written. </param><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextWriter.WriteLine(System.String,System.Object)">
            <summary>
            Writes out a formatted string and a new line, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)"/>.
            </summary>
            <param name="format">The formatted string. </param><param name="arg0">The object to write into the formatted string. </param><exception cref="T:System.ArgumentNullException"><paramref name="format"/> is null. </exception><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.FormatException">The format specification in format is invalid.-or- The number indicating an argument to be formatted is less than zero, or larger than or equal to the number of provided objects to be formatted. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextWriter.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            Writes out a formatted string and a new line, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)"/>.
            </summary>
            <param name="format">The formatting string. </param><param name="arg0">The object to write into the format string. </param><param name="arg1">The object to write into the format string. </param><exception cref="T:System.ArgumentNullException"><paramref name="format"/> is null. </exception><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.FormatException">The format specification in format is invalid.-or- The number indicating an argument to be formatted is less than zero, or larger than or equal to the number of provided objects to be formatted. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes out a formatted string and a new line, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)"/>.
            </summary>
            <param name="format">The formatting string. </param><param name="arg0">The object to write into the format string. </param><param name="arg1">The object to write into the format string. </param><param name="arg2">The object to write into the format string. </param><exception cref="T:System.ArgumentNullException"><paramref name="format"/> is null. </exception><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.FormatException">The format specification in format is invalid.-or- The number indicating an argument to be formatted is less than zero, or larger than or equal to the number of provided objects to be formatted. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.IO.ITextWriter.WriteLine(System.String,System.Object[])">
            <summary>
            Writes out a formatted string and a new line, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)"/>.
            </summary>
            <param name="format">The formatting string. </param><param name="arg">The object array to write into format string. </param><exception cref="T:System.ArgumentNullException">A string or object is passed in as null. </exception><exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception><exception cref="T:System.IO.IOException">An I/O error occurs. </exception><exception cref="T:System.FormatException">The format specification in format is invalid.-or- The number indicating an argument to be formatted is less than zero, or larger than or equal to arg.Length. </exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:UnitWrappers.System.IO.ITextWriter.FormatProvider">
            <summary>
            Gets an object that controls formatting.
            </summary>
            
            <returns>
            An <see cref="T:System.IFormatProvider"/> object for a specific culture, or the formatting of the current culture if no other culture is specified.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:UnitWrappers.System.IO.ITextWriter.Encoding">
            <summary>
            When overridden in a derived class, returns the <see cref="T:System.Text.Encoding"/> in which the output is written.
            </summary>
            
            <returns>
            The Encoding in which the output is written.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:UnitWrappers.System.IO.ITextWriter.NewLine">
            <summary>
            Gets or sets the line terminator string used by the current TextWriter.
            </summary>
            
            <returns>
            The line terminator string for the current TextWriter.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:UnitWrappers.System.IO.IStreamWriter.CreateObjRef(System.Type)">
            <summary>
            Creates an object that contains all the relevant information required to generate a proxy used to communicate with a remote object.
            </summary>
            <param name="requestedType">The Type of the object that the new ObjRef will reference.</param>
            <returns>Information required to generate a proxy.</returns>
        </member>
        <member name="P:UnitWrappers.System.IO.IStreamWriter.AutoFlush">
            <summary>
            Gets or sets a value indicating whether the StreamWriteBase will flush its buffer to the underlying stream after every call to StreamWriteBase.Write. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IStreamWriter.BaseStream">
            <summary>
            Gets the underlying stream that interfaces with a backing store.
            </summary>
        </member>
        <member name="T:UnitWrappers.System.IO.MemoryStreamWrap">
            <summary>
            Wrapper for <see cref="T:System.IO.MemoryStream"/> class.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.MemoryStreamWrap.#ctor">
            <summary>
            Initializes a new instance of the MemoryStreamWrap class with an expandable capacity initialized to zero. 
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.MemoryStreamWrap.#ctor(System.IO.MemoryStream)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.IO.MemoryStreamWrap"/> class on the specified path. 
            </summary>
            <param name="memoryStream">A <see cref="T:System.IO.MemoryStream"/> object.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.MemoryStreamWrap.#ctor(System.Byte[])">
            <summary>
            Initializes a new non-resizable instance of the MemoryStreamWrap class based on the specified byte array. 
            </summary>
            <param name="buffer">The array of unsigned bytes from which to create the current stream. </param>
        </member>
        <member name="M:UnitWrappers.System.IO.MemoryStreamWrap.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the MemoryStreamWrap class with an expandable capacity initialized as specified. 
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:UnitWrappers.System.IO.MemoryStreamWrap.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Initializes a new non-resizable instance of the MemoryStreamWrap class based on the specified byte array with the CanWrite property set as specified. 
            </summary>
            <param name="buffer">The array of unsigned bytes from which to create this stream. </param>
            <param name="writable">The setting of the CanWrite property, which determines whether the stream supports writing. </param>
        </member>
        <member name="M:UnitWrappers.System.IO.MemoryStreamWrap.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new non-resizable instance of the MemoryStreamWrap class based on the specified region (index) of a byte array. 
            </summary>
            <param name="buffer">The array of unsigned bytes from which to create this stream. </param>
            <param name="index">The index into buffer at which the stream begins.</param>
            <param name="count">The length of the stream in bytes. </param>
        </member>
        <member name="M:UnitWrappers.System.IO.MemoryStreamWrap.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new non-resizable instance of the MemoryStreamWrap class based on the specified region of a byte array, with the CanWrite property set as specified. 
            </summary>
            <param name="buffer">The array of unsigned bytes from which to create this stream. </param>
            <param name="index">The index into buffer at which the stream begins.</param>
            <param name="count">The length of the stream in bytes. </param>
            <param name="writable">The setting of the CanWrite property, which determines whether the stream supports writing. </param>
        </member>
        <member name="M:UnitWrappers.System.IO.MemoryStreamWrap.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the MemoryStreamWrap class based on the specified region of a byte array, with the CanWrite property set as specified, and the ability to call GetBuffer set as specified. 
            </summary>
            <param name="buffer">The array of unsigned bytes from which to create this stream. </param>
            <param name="index">The index into buffer at which the stream begins.</param>
            <param name="count">The length of the stream in bytes.</param>
            <param name="writable">The setting of the CanWrite property, which determines whether the stream supports writing. </param>
            <param name="publiclyVisible"> true to enable GetBuffer, which returns the unsigned byte array from which the stream was created; otherwise, false. </param>
        </member>
        <member name="M:UnitWrappers.System.IO.MemoryStreamWrap.Flush">
            <summary>
            Overrides Stream.Flush so that no action is performed. 
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.MemoryStreamWrap.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the current stream and writes the data to buffer. 
            </summary>
            <param name="buffer">When this method returns, contains the specified byte array with the values between offset and (offset + count - 1) replaced by the characters read from the current stream. </param>
            <param name="offset">The byte offset in buffer at which to begin reading.</param>
            <param name="count">The maximum number of bytes to read. </param>
            <returns>The total number of bytes written into the buffer. This can be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached before any bytes are read. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.MemoryStreamWrap.ReadByte">
            <summary>
            Reads a byte from the current stream. 
            </summary>
            <returns>The byte cast to a Int32, or -1 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.MemoryStreamWrap.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream to the specified value. 
            </summary>
            <param name="offset">The new position within the stream. This is relative to the loc parameter, and can be positive or negative. </param>
            <param name="origin">A value of type SeekOrigin, which acts as the seek reference point. </param>
            <returns>The new position within the stream, calculated by combining the initial reference point and the offset.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.MemoryStreamWrap.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream to the specified value. 
            </summary>
            <param name="value">The value at which to set the length.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.MemoryStreamWrap.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to the current stream using data read from buffer. 
            </summary>
            <param name="buffer">The buffer to write data from. </param>
            <param name="offset">The byte offset in buffer at which to begin writing from. </param>
            <param name="count">The maximum number of bytes to write. </param>
        </member>
        <member name="M:UnitWrappers.System.IO.MemoryStreamWrap.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current stream at the current position. 
            </summary>
            <param name="value">The byte to write. </param>
        </member>
        <member name="P:UnitWrappers.System.IO.MemoryStreamWrap.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.MemoryStreamWrap.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.MemoryStreamWrap.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.MemoryStreamWrap.Length">
            <summary>
            Gets the length of the stream in bytes.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.MemoryStreamWrap.Position">
            <summary>
            Gets or sets the current position within the stream. 
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.IPath.ChangeExtension(System.String,System.String)">
            <summary>
            Changes the extension of a path string.
            </summary>
            <param name="path">The path information to modify. The path cannot contain any of the characters defined in GetInvalidPathChars.</param>
            <param name="extension">The new extension (with or without a leading period). Specify null to remove an existing extension from path.</param>
            <returns>A string containing the modified path information.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IPath.Combine(System.String,System.String)">
            <summary>
            Combines two path strings.
            </summary>
            <param name="path1">The first path.</param>
            <param name="path2">The second path.</param>
            <returns>A string containing the combined paths. If one of the specified paths is a zero-length string, this method returns the other path. If path2 contains an absolute path, this method returns path2.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IPath.Combine(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="path1"></param>
            <param name="path2"></param>
            <param name="path3"></param>
            <returns></returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IPath.Combine(System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="path1"></param>
            <param name="path2"></param>
            <param name="path3"></param>
            <param name="path4"></param>
            <returns></returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IPath.Combine(System.String[])">
            <summary>
            
            </summary>
            <param name="paths"></param>
            <returns></returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IPath.GetDirectoryName(System.String)">
            <summary>
            Returns the directory information for the specified path string.
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns>A String containing directory information for path, or null if path denotes a root directory, is the empty string (""), or is null. Returns String.Empty if path does not contain directory information.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IPath.GetExtension(System.String)">
            <summary>
            Returns the extension of the specified path string. 
            </summary>
            <param name="path">The path string from which to get the extension. </param>
            <returns>A String containing the extension of the specified path (including the "."), null , or Empty. If path is null , GetExtension returns null. If path does not have extension information, GetExtension returns Empty.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IPath.GetFileName(System.String)">
            <summary>
            Returns the file name and extension of the specified path string.
            </summary>
            <param name="path">The path string from which to obtain the file name and extension.</param>
            <returns>A String consisting of the characters after the last directory character in path. If the last character of path is a directory or volume separator character, this method returns Empty. If path is null, this method returns null.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IPath.GetFileNameWithoutExtension(System.String)">
            <summary>
            Returns the file name of the specified path string without the extension.
            </summary>
            <param name="path">The path of the file.</param>
            <returns>A String containing the string returned by GetFileName, minus the last period (.) and all characters following it.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IPath.GetFullPath(System.String)">
            <summary>
            Returns the absolute path for the specified path string.
            </summary>
            <param name="path">The file or directory for which to obtain absolute path information.</param>
            <returns>A string containing the fully qualified location of path, such as "C:\MyFile.txt".</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IPath.GetInvalidFileNameChars">
            <summary>
            Gets an array containing the characters that are not allowed in file names. 
            </summary>
            <returns>An array containing the characters that are not allowed in file names.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IPath.GetInvalidPathChars">
            <summary>
            Gets an array containing the characters that are not allowed in path names. 
            </summary>
            <returns>An array containing the characters that are not allowed in path names.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IPath.GetPathRoot(System.String)">
            <summary>
            Gets the root directory information of the specified path. 
            </summary>
            <param name="path">The path from which to obtain root directory information. </param>
            <returns>A string containing the root directory of path, such as "C:\", or null if path is null, or an empty string if path does not contain root directory information.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IPath.GetRandomFileName">
            <summary>
            Returns a random folder name or file name. 
            </summary>
            <returns>A random folder name or file name. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IPath.GetTempFileName">
            <summary>
            Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file. 
            </summary>
            <returns>A String containing the full path of the temporary file.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IPath.GetTempPath">
            <summary>
            Returns the path of the current system's temporary folder.
            </summary>
            <returns>A String containing the path information of a temporary directory.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IPath.HasExtension(System.String)">
            <summary>
            Determines whether a path includes a file name extension.
            </summary>
            <param name="path">The path to search for an extension. </param>
            <returns> true if the characters that follow the last directory separator (\\ or /) or volume separator (:) in the path include a period (.) followed by one or more characters; otherwise, false.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IPath.IsPathRooted(System.String)">
            <summary>
            Gets a value indicating whether the specified path string contains absolute or relative path information.
            </summary>
            <param name="path">The path to test.</param>
            <returns> true if path contains an absolute path; otherwise, false.</returns>
        </member>
        <member name="P:UnitWrappers.System.IO.IPath.AltDirectorySeparatorChar">
            <summary>
            Provides a platform-specific alternate character used to separate directory levels in a path string that reflects a hierarchical file system organization.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IPath.DirectorySeparatorChar">
            <summary>
            Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IPath.PathSeparator">
            <summary>
            A platform-specific separator character used to separate path strings in environment variables. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IPath.VolumeSeparatorChar">
            <summary>
            Provides a platform-specific volume separator character.
            </summary>
        </member>
        <member name="T:UnitWrappers.System.IO.StreamWriterBase">
            <summary>
            
            </summary>
        </member>
        <member name="E:UnitWrappers.System.Net.NetworkInformation.INetworkChange.NetworkAvailabilityChanged">
            <summary>
            Occurs when the availability of the network changes.
            </summary>
        </member>
        <member name="E:UnitWrappers.System.Net.NetworkInformation.INetworkChange.NetworkAddressChanged">
            <summary>
            Occurs when the IP address of a network interface changes.
            </summary>
        </member>
        <member name="T:UnitWrappers.System.Net.NetworkInformation.INetworkInterface">
            <summary>
            Provides configuration and statistical information for a network interface.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Net.NetworkInformation.INetworkInterface.GetAllNetworkInterfaces">
            <summary>
            Returns objects that describe the network interfaces on the local computer.
            </summary>
            <returns>
            A <see cref="T:System.Net.NetworkInformation.NetworkInterface"/> array that contains objects that describe the available network interfaces, or an empty array if no interfaces are detected
            </returns>
            <exception cref="T:System.Net.NetworkInformation.NetworkInformationException"></exception>
        </member>
        <member name="M:UnitWrappers.System.Net.NetworkInformation.INetworkInterface.GetIsNetworkAvailable">
            <summary>
            Indicates whether any network connection is available.
            </summary>
            <returns>
            <c>true</c> if a network connection is available; otherwise, <c>false</c>.
            </returns>
            <remarks>
            A network connection is considered to be available if any network interface is marked "up" and is not a loopback or tunnel interface.
            </remarks>
        </member>
        <member name="M:UnitWrappers.System.Net.NetworkInformation.IPing.Send(System.String)">
            <summary>
            Attempts to send an Internet Control Message Protocol (ICMP) echo message to the specified computer, and receive a corresponding ICMP echo reply message from that computer.
            </summary>
            <param name="hostNameOrAddress">A <see cref="T:System.String"/> that identifies the computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</param>
            <returns>A <see cref="T:System.Net.NetworkInformation.PingReply"/> object that provides information about the ICMP echo reply message, if one was received, or provides the reason for the failure, if no message was received</returns>
        </member>
        <member name="E:UnitWrappers.System.Net.NetworkInformation.NetworkChangeWrap.NetworkAvailabilityChanged">
            <inheritdoc />
        </member>
        <member name="E:UnitWrappers.System.Net.NetworkInformation.NetworkChangeWrap.NetworkAddressChanged">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.NetworkInformation.NetworkInterfaceWrap.GetAllNetworkInterfaces">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.NetworkInformation.NetworkInterfaceWrap.GetIsNetworkAvailable">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.NetworkInformation.PingWrap.Send(System.String)">
            <inheritdoc />
        </member>
        <member name="T:UnitWrappers.Microsoft.Win32.SafeHandles.SafeFileHandleWrap">
            <summary>
            Wrapper for <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> class.
            </summary>
        </member>
        <member name="M:UnitWrappers.Microsoft.Win32.SafeHandles.SafeFileHandleWrap.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.Microsoft.Win32.SafeHandles.SafeFileHandleWrap"/> class on the specified path. 
            </summary>
            <param name="safeFileHandle">A <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> object.</param>
        </member>
        <member name="M:UnitWrappers.Microsoft.Win32.SafeHandles.SafeFileHandleWrap.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.Microsoft.Win32.SafeHandles.SafeFileHandleWrap"/> class on the specified path. 
            </summary>
            <param name="preexistingHandle">An IntPtr object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle"> true to reliably release the handle during the finalization phase; false to prevent reliable release (not recommended).</param>
        </member>
        <member name="T:UnitWrappers.System.AppDomainSystem">
            <summary>
            Wraps static members of <see cref="T:System.AppDomain"/>
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IAppDomainSystem.Unload(UnitWrappers.System.IAppDomain)">
            <summary>
            Unloads the specified application domain.
            </summary>
            <param name="domain">An application domain to unload.</param>
        </member>
        <member name="M:UnitWrappers.System.IAppDomainSystem.CreateDomain(System.String)">
             <summary>
            Creates a new application domain with the specified name
             </summary>
             <param name="friendlyName">The friendly name of the domain.</param>
             <returns>The newly created application domain.</returns>
             <exception cref="T:System.ArgumentNullException">friendlyName is null</exception>
             <remarks>
             The <i>friendlyName</i> parameter is intended to identify the domain in a manner that is meaningful to humans. This string should be suitable for display in user interfaces.
             This method overload uses the <seealso cref="T:System.AppDomainSetup"/> information from the default application domain.
             </remarks>
        </member>
        <member name="P:UnitWrappers.System.IAppDomainSystem.CurrentDomain">
            <summary>
            Gets the current application domain for the current Thread.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IAppDomainSystem.MonitoringIsEnabled">
            <summary>
            Gets or sets a value that indicates whether CPU and memory monitoring of application domains is enabled for the current process. Once monitoring is enabled for a process, it cannot be disabled.
            </summary>
            <value>true if monitoring is enabled; otherwise false.</value>
        </member>
        <member name="P:UnitWrappers.System.IAppDomainSystem.MonitoringSurvivedProcessMemorySize">
            <summary>
            Gets the total bytes that survived from the last full, blocking collection for all application domains in the process
            </summary>
            <value>The total number of surviving bytes for the process</value>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="P:UnitWrappers.System.IAppDomainSystem.MonitoringIsEnabled"/> property is set to false.
            </exception>
            <remarks>
            After a full, blocking collection, this number represents the number of bytes currently held on the managed heap. It should be close to the number reported by the <see cref="M:System.GC.GetTotalMemory(System.Boolean)"/> method.
            Statistics are updated only after a full, blocking collection; that is, a collection that includes all generations and that stops the application while collection occurs. For example, the <see cref="M:System.GC.Collect"/> method overload performs a full, blocking collection. (Concurrent collection occurs in the background and does not block the application.)
            </remarks>
        </member>
        <member name="M:UnitWrappers.System.AppDomainSystem.Unload(UnitWrappers.System.IAppDomain)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.AppDomainSystem.CreateDomain(System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.AppDomainSystem.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup,System.Security.PermissionSet,System.Security.Policy.StrongName[])">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.AppDomainSystem.CreateDomain(System.String,System.Security.Policy.Evidence)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.AppDomainSystem.CreateDomain(System.String,System.Security.Policy.Evidence,System.AppDomainSetup)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.AppDomainSystem.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.AppDomainSystem.CreateDomain(System.String,System.Security.Policy.Evidence,System.String,System.String,System.Boolean,System.AppDomainInitializer,System.String[])">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.AppDomainSystem.CurrentDomain">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.AppDomainSystem.MonitoringIsEnabled">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.AppDomainSystem.MonitoringSurvivedProcessMemorySize">
            <inheritdoc />
        </member>
        <member name="T:UnitWrappers.System.AppDomainWrap">
            <summary>
            Wrapper for <see cref="T:System.AppDomain"/> class.
            </summary>
        </member>
        <member name="T:UnitWrappers.System.IAppDomain">
            <summary>
            Wrapper for <see cref="T:System.AppDomain"/> class.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IAppDomain.GetData(System.String)">
            <summary>
            Gets the value stored in the current application domain for the specified name.
            </summary>
            <param name="name">The name of a predefined application domain property, or the name of an application domain property you have defined. </param>
            <returns>The value of the name property. </returns>
        </member>
        <member name="M:UnitWrappers.System.IAppDomain.Load(UnitWrappers.System.Reflection.IAssemblyName)">
            <summary>
            Loads an Assembly given its IAssemblyName. 
            </summary>
            <param name="assemblyRef">An object that describes the assembly to load.</param>
            <returns>The loaded assembly.</returns>
        </member>
        <member name="M:UnitWrappers.System.IAppDomain.SetData(System.String,System.Object)">
            <summary>
            Assigns the specified value to the specified application domain property.
            </summary>
            <param name="name">The name of a user-defined application domain property to create or change.</param>
            <param name="data">The value of the property.</param>
        </member>
        <member name="M:UnitWrappers.System.IAppDomain.CreateInstanceAndUnwrap(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="assemblyName"></param>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="E:UnitWrappers.System.IAppDomain.AssemblyResolve">
            <summary>
            Occurs when the resolution of an assembly fails.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.AppDomainWrap.#ctor(System.AppDomain)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.AppDomainWrap"/> class. 
            </summary>
            <param name="appDomain">AppDomain object.</param>
        </member>
        <member name="M:UnitWrappers.System.AppDomainWrap.GetData(System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.AppDomainWrap.ToString">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.AppDomainWrap.Load(UnitWrappers.System.Reflection.IAssemblyName)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.AppDomainWrap.SetData(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.AppDomainWrap.CreateInstanceAndUnwrap(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.AppDomainWrap.CreateInstanceAndUnwrap(System.String,System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.AppDomainWrap.CreateInstanceAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.AppDomainWrap.CreateInstanceFromAndUnwrap(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.AppDomainWrap.CreateInstanceFromAndUnwrap(System.String,System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.AppDomainWrap.CreateInstanceFromAndUnwrap(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[],System.Security.Policy.Evidence)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.AppDomainWrap.DoCallBack(System.CrossAppDomainDelegate)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.AppDomainWrap.InitializeLifetimeService">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.AppDomainWrap.IsDefaultAppDomain">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.AppDomainWrap.ExecuteAssembly(System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.AppDomainWrap.ExecuteAssembly(System.String,System.Security.Policy.Evidence)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.AppDomainWrap.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.AppDomainWrap.ExecuteAssembly(System.String,System.Security.Policy.Evidence,System.String[],System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.AppDomainWrap.ExecuteAssemblyByName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.AppDomainWrap.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.AppDomainWrap.ExecuteAssemblyByName(UnitWrappers.System.Reflection.IAssemblyName,System.Security.Policy.Evidence,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.AppDomainWrap.ExecuteAssemblyByName(System.String,System.Security.Policy.Evidence,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.AppDomainWrap.GetAssemblies">
            <inheritdoc />
        </member>
        <member name="E:UnitWrappers.System.AppDomainWrap.UnitWrappers#System#IAppDomain#AssemblyResolve">
            <inheritdoc />
        </member>
        <member name="E:UnitWrappers.System.AppDomainWrap.DomainUnload">
            <inheritdoc />
        </member>
        <member name="E:UnitWrappers.System.AppDomainWrap.ProcessExit">
            <inheritdoc />
        </member>
        <member name="E:UnitWrappers.System.AppDomainWrap.ReflectionOnlyAssemblyResolve">
            <inheritdoc />
        </member>
        <member name="E:UnitWrappers.System.AppDomainWrap.ResourceResolve">
            <inheritdoc />
        </member>
        <member name="E:UnitWrappers.System.AppDomainWrap.TypeResolve">
            <inheritdoc />
        </member>
        <member name="E:UnitWrappers.System.AppDomainWrap.UnhandledException">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.AppDomainWrap.DomainManager">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.AppDomainWrap.Evidence">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.AppDomainWrap.BaseDirectory">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.AppDomainWrap.DynamicDirectory">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.AppDomainWrap.FriendlyName">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.AppDomainWrap.Id">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.AppDomainWrap.RelativeSearchPath">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.AppDomainWrap.ShadowCopyFiles">
            <inheritdoc />
        </member>
        <member name="T:UnitWrappers.System.Configuration.ConfigurationManagerWrap">
            <summary>
            Wrapper for <see cref="T:System.Configuration.ConfigurationManager"/> class.
            </summary>
        </member>
        <member name="T:UnitWrappers.System.Configuration.IConfigurationManager">
            <summary>
            Wrapper for <see cref="T:System.Configuration.ConfigurationManager"/> class.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Configuration.IConfigurationManager.AppSettings">
            <summary>
            Gets the AppSettingsSection  data for the current application's default configuration.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Configuration.IConfigurationManager.ConnectionStrings">
            <summary>
            Gets the ConnectionStringsSection  data for the current application's default configuration.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Configuration.ConfigurationManagerWrap.GetSection(System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Configuration.ConfigurationManagerWrap.OpenExeConfiguration(System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Configuration.ConfigurationManagerWrap.OpenExeConfiguration(System.Configuration.ConfigurationUserLevel)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Configuration.ConfigurationManagerWrap.OpenMachineConfiguration">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Configuration.ConfigurationManagerWrap.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Configuration.ConfigurationManagerWrap.OpenMappedMachineConfiguration(System.Configuration.ConfigurationFileMap)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Configuration.ConfigurationManagerWrap.RefreshSection(System.String)">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Configuration.ConfigurationManagerWrap.AppSettings">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Configuration.ConfigurationManagerWrap.ConnectionStrings">
            <inheritdoc />
        </member>
        <member name="T:UnitWrappers.System.ConsoleWrap">
            <summary>
            Wrapper for <see cref="T:System.Console"/> class.
            </summary>
        </member>
        <member name="T:UnitWrappers.System.IConsole">
            <summary>
            Wrapper for <see cref="T:System.Console"/> class.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IConsole.ResetColor">
            <summary>
            Sets the foreground and background console colors to their defaults.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IConsole.SetOut(System.IO.TextWriter)">
            <summary>
             Sets the Out  property to the specified TextWriter  object.
            </summary>
            <param name="newOut">A TextWriter  stream that is the new standard output.</param>
        </member>
        <member name="M:UnitWrappers.System.IConsole.Write(System.Char)">
            <summary>
            Writes the specified Unicode character value to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:UnitWrappers.System.IConsole.Write(System.String)">
            <summary>
            Writes the specified string value to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:UnitWrappers.System.IConsole.WriteLine">
            <summary>
            Writes the current line terminator to the standard output stream.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IConsole.WriteLine(System.String)">
            <summary>
            Writes the specified string value, followed by the current line terminator, to the standard output stream.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:UnitWrappers.System.IConsole.WriteLine(System.String,System.Object)">
            <summary>
            Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream using the specified format information.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">An object to write using format.</param>
        </member>
        <member name="M:UnitWrappers.System.IConsole.WriteLine(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects, followed by the current line terminator, to the standard output stream using the specified format information.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg">An array of objects to write using format.</param>
        </member>
        <member name="M:UnitWrappers.System.IConsole.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to write using format.</param>
            <param name="arg1">The second object to write using format.</param>
        </member>
        <member name="M:UnitWrappers.System.IConsole.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">The first object to write using format.</param>
            <param name="arg1">The second object to write using format.</param>
            <param name="arg2">The third object to write using format.</param>
        </member>
        <member name="P:UnitWrappers.System.IConsole.ForegroundColor">
            <summary>
            Gets or sets the foreground color of the console.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IConsole.Out">
            <summary>
            Gets the standard output stream.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.ConsoleWrap.ResetColor">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.ConsoleWrap.SetOut(System.IO.TextWriter)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.ConsoleWrap.Write(System.Char)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.ConsoleWrap.Write(System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.ConsoleWrap.WriteLine">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.ConsoleWrap.WriteLine(System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.ConsoleWrap.WriteLine(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.ConsoleWrap.WriteLine(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.ConsoleWrap.WriteLine(System.String,System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.ConsoleWrap.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.ConsoleWrap.ForegroundColor">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.ConsoleWrap.Out">
            <inheritdoc />
        </member>
        <member name="T:UnitWrappers.System.Data.SqlClient.ISqlCommand">
            <summary>
            Wrapper for <see cref="T:System.Data.SqlClient.SqlCommand"/> class.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.ISqlCommand.ExecuteReader">
            <summary>
            Sends the CommandText to the Connection and builds a SqlDataReader.
            </summary>
            <returns>A ISqlDataReader object. </returns>
        </member>
        <member name="P:UnitWrappers.System.Data.SqlClient.ISqlCommand.SqlCommandInstance">
            <summary>
            Gets <see cref="T:System.Data.SqlClient.SqlCommand"/> object.
            </summary>
        </member>
        <member name="T:UnitWrappers.System.Data.SqlClient.ISqlConnection">
            <summary>
            Wrapper for <see cref="T:System.Data.SqlClient.SqlConnection"/> class.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Data.SqlClient.ISqlConnection.DataSource">
            <summary>
            Gets the name of the instance of SQL Server to which to connect. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Data.SqlClient.ISqlConnection.FireInfoMessageEventOnUserErrors">
            <summary>
            Gets or sets the FireInfoMessageEventOnUserErrors property.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Data.SqlClient.ISqlConnection.PacketSize">
            <summary>
            Gets the size (in bytes) of network packets used to communicate with an instance of SQL Server.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Data.SqlClient.ISqlConnection.ServerVersion">
            <summary>
            Gets a string that contains the version of the instance of SQL Server to which the client is connected.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Data.SqlClient.ISqlConnection.UnderlyingObject">
            <summary>
            Gets <see cref="T:System.Data.SqlClient.SqlConnection"/> object.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Data.SqlClient.ISqlConnection.StatisticsEnabled">
            <summary>
            When set to true, enables statistics gathering for the current connection.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Data.SqlClient.ISqlConnection.WorkstationId">
            <summary>
            Gets a string that identifies the database client.
            </summary>
        </member>
        <member name="T:UnitWrappers.System.Data.SqlClient.ISqlDataReader">
            <summary>
            Wrapper for <see cref="T:System.Data.SqlClient.SqlDataReader"/> class.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Data.SqlClient.ISqlDataReader.UnderlyingObject">
            <summary>
            Gets <see cref="T:System.Data.SqlClient.SqlDataReader"/> object.
            </summary>
        </member>
        <member name="T:UnitWrappers.System.Data.SqlClient.SqlCommandWrap">
            <summary>
            Wrapper for <see cref="T:System.Data.SqlClient.SqlCommand"/> class.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlCommandWrap.#ctor">
            <summary>
            Initializes a new instance of the SqlCommandWrap class. 
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlCommandWrap.#ctor(System.Data.SqlClient.SqlCommand)">
            <summary>
            Initializes a new instance of the SqlCommandWrap class. 
            </summary>
            <param name="command">SqlCommand object.</param>
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlCommandWrap.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SqlCommandWrap class with the text of the query.
            </summary>
            <param name="cmdText">The text of the query.</param>
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlCommandWrap.#ctor(System.String,UnitWrappers.System.Data.SqlClient.ISqlConnection)">
            <summary>
            Initializes a new instance of the SqlCommandWrap class with the text of the query and a ISqlConnectionWrap. 
            </summary>
            <param name="cmdText">The text of the query.</param>
            <param name="connection">A ISqlConnectionWrap that represents the connection to an instance of SQL Server.</param>
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlCommandWrap.ExecuteReader">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Data.SqlClient.SqlCommandWrap.SqlCommandInstance">
            <inheritdoc />
        </member>
        <member name="T:UnitWrappers.System.Data.SqlClient.SqlConnectionWrap">
            <summary>
            Wrapper for <see cref="T:System.Data.SqlClient.SqlConnection"/> class.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlConnectionWrap.#ctor">
            <summary>
            Initializes a new instance of the SqlConnectionWrap class. 
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlConnectionWrap.#ctor(System.Data.SqlClient.SqlConnection)">
            <summary>
            Initializes a new instance of the SqlConnectionWrap class. 
            </summary>
            <param name="connection">SqlConnection object.</param>
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlConnectionWrap.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SqlConnection class when given a string that contains the connection string. 
            </summary>
            <param name="connectionString">The connection used to open the SQL Server database.</param>
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlConnectionWrap.Close">
            <summary>
            Closes the connection to the database. This is the preferred method of closing any open connection.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlConnectionWrap.Open">
            <summary>
            Opens a database connection with the property settings specified by the ConnectionString. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Data.SqlClient.SqlConnectionWrap.ConnectionString">
            <summary>
            Gets or sets the string used to open a SQL Server database. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Data.SqlClient.SqlConnectionWrap.ConnectionTimeout">
            <summary>
            Gets the time to wait while trying to establish a connection before terminating the attempt and generating an error.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Data.SqlClient.SqlConnectionWrap.Database">
            <summary>
            Gets the name of the current database or the database to be used after a connection is opened.
            </summary>
        </member>
        <member name="T:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap">
            <summary>
            Wrapper for <see cref="T:System.Data.SqlClient.SqlDataReader"/> class.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap.#ctor(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Initializes a new instance of the SqlDataReaderWrap class. 
            </summary>
            <param name="dataReader">SqlDataReader object.</param>
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap.GetName(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap.GetDataTypeName(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap.GetFieldType(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap.GetValue(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap.GetValues(System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap.GetOrdinal(System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap.GetBoolean(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap.GetByte(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap.GetChar(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap.GetGuid(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap.GetInt16(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap.GetInt32(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap.GetInt64(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap.GetFloat(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap.GetDouble(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap.GetString(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap.GetDecimal(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap.GetDateTime(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap.GetData(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap.IsDBNull(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap.Close">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap.GetSchemaTable">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap.NextResult">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap.Read">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap.Dispose">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap.FieldCount">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap.System#Data#IDataRecord#Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap.System#Data#IDataRecord#Item(System.String)">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap.Depth">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap.IsClosed">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Data.SqlClient.SqlDataReaderWrap.RecordsAffected">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.IDateTimeSystem.SpecifyKind(System.DateTime,System.DateTimeKind)">
            <summary>
            Creates a new DateTime object that represents the same time as the specified DateTime, but is designated in either local time, Coordinated Universal Time (UTC), or neither, as indicated by the specified DateTimeKind value.
            </summary>
            <param name="value">A DateTime object.</param>
            <param name="kind">One of the DateTimeKind values.</param>
            <returns>A new DateTime object consisting of the same time represented by the value parameter and the DateTimeKind value specified by the kind parameter.</returns>
        </member>
        <member name="M:UnitWrappers.System.IDateTimeSystem.DaysInMonth(System.Int32,System.Int32)">
            <summary>
            Returns the number of days in the specified month and year.
            </summary>
            <param name="year">The year. </param>
            <param name="month">The month (a number ranging from 1 to 12). </param>
            <returns>The number of days in month for the specified year.</returns>
        </member>
        <member name="M:UnitWrappers.System.IDateTimeSystem.Compare(System.DateTime,System.DateTime)">
            <summary>
            Compares two instances of DateTime and returns an integer that indicates whether the first instance is earlier than, the same as, or later than the second instance.
            </summary>
            <param name="t1">The first DateTime. </param>
            <param name="t2">The second DateTime. </param>
            <returns>A signed number indicating the relative values of t1 and t2.</returns>
        </member>
        <member name="M:UnitWrappers.System.IDateTimeSystem.Equals(System.DateTime,System.DateTime)">
            <summary>
            Returns a value indicating whether two instances of DateTime are equal.
            </summary>
            <param name="t1">The first DateTime instance. </param>
            <param name="t2">The second DateTime instance. </param>
            <returns> true if the two DateTime values are equal; otherwise, false.</returns>
        </member>
        <member name="M:UnitWrappers.System.IDateTimeSystem.FromBinary(System.Int64)">
            <summary>
            Deserializes a 64-bit binary value and recreates an original serialized DateTime object.
            </summary>
            <param name="dateData">A 64-bit signed integer that encodes the Kind property in a 2-bit field and the Ticks property in a 62-bit field. </param>
            <returns>A DateTime object that is equivalent to the DateTime object that was serialized by the ToBinary method.</returns>
        </member>
        <member name="M:UnitWrappers.System.IDateTimeSystem.FromFileTime(System.Int64)">
            <summary>
            Converts the specified Windows file time to an equivalent local time.
            </summary>
            <param name="fileTime">A Windows file time expressed in ticks. </param>
            <returns>A DateTime object that represents a local time equivalent to the date and time represented by the fileTime parameter.</returns>
        </member>
        <member name="M:UnitWrappers.System.IDateTimeSystem.FromFileTimeUtc(System.Int64)">
            <summary>
            Converts the specified Windows file time to an equivalent UTC time.
            </summary>
            <param name="fileTime">A Windows file time expressed in ticks. </param>
            <returns>A DateTime object that represents a UTC time equivalent to the date and time represented by the fileTime parameter.</returns>
        </member>
        <member name="M:UnitWrappers.System.IDateTimeSystem.FromOADate(System.Double)">
            <summary>
            Returns a DateTime equivalent to the specified OLE Automation Date.
            </summary>
            <param name="d">An OLE Automation Date value. </param>
            <returns>A DateTime that represents the same date and time as d.</returns>
        </member>
        <member name="M:UnitWrappers.System.IDateTimeSystem.IsLeapYear(System.Int32)">
            <summary>
            Returns an indication whether the specified year is a leap year.
            </summary>
            <param name="year">A 4-digit year. </param>
            <returns> true if year is a leap year; otherwise, false.</returns>
        </member>
        <member name="M:UnitWrappers.System.IDateTimeSystem.Parse(System.String)">
            <summary>
            Converts the specified string representation of a date and time to its DateTime equivalent.
            </summary>
            <param name="s">A string containing a date and time to convert. </param>
            <returns>A DateTime equivalent to the date and time contained in s.</returns>
        </member>
        <member name="M:UnitWrappers.System.IDateTimeSystem.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the specified string representation of a date and time to its DateTime equivalent using the specified culture-specific format information.
            </summary>
            <param name="s">A string containing a date and time to convert. </param>
            <param name="provider">An object that supplies culture-specific format information about s. </param>
            <returns>A DateTime equivalent to the date and time contained in s as specified by provider.</returns>
        </member>
        <member name="M:UnitWrappers.System.IDateTimeSystem.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            Converts the specified string representation of a date and time to its DateTime equivalent using the specified culture-specific format information and formatting style.
            </summary>
            <param name="s">A string containing a date and time to convert. </param>
            <param name="provider">An object that supplies culture-specific formatting information about s. </param>
            <param name="styles">A bitwise combination of the enumeration values that indicates the style elements that can be present in s for the parse operation to succeed and that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is None.</param>
            <returns>A DateTime equivalent to the date and time contained in s as specified by provider and styles.</returns>
        </member>
        <member name="M:UnitWrappers.System.IDateTimeSystem.ParseExact(System.String,System.String,System.IFormatProvider)">
            <summary>
            Converts the specified string representation of a date and time to its DateTime equivalent using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.
            </summary>
            <param name="s">A string that contains a date and time to convert. </param>
            <param name="format">A format specifier that defines the required format of s. </param>
            <param name="provider">An object that supplies culture-specific format information about s. </param>
            <returns>A DateTime equivalent to the date and time contained in s as specified by format and provider.</returns>
        </member>
        <member name="M:UnitWrappers.System.IDateTimeSystem.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            Converts the specified string representation of a date and time to its DateTime equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly or an exception is thrown.
            </summary>
            <param name="s">A string that contains a date and time to convert. </param>
            <param name="format">A format specifier that defines the required format of s. </param>
            <param name="provider">An object that supplies culture-specific format information about s. </param>
            <param name="style">A bitwise combination of the enumeration values that provides additional information about s, about style elements that may be present in s, or about the conversion from s to a DateTime value. A typical value to specify is None.</param>
            <returns>A DateTime equivalent to the date and time contained in s as specified by format, provider, and style.</returns>
        </member>
        <member name="M:UnitWrappers.System.IDateTimeSystem.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            Converts the specified string representation of a date and time to its DateTime equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match at least one of the specified formats exactly or an exception is thrown.
            </summary>
            <param name="s">A string containing one or more dates and times to convert. </param>
            <param name="formats">An array of allowable formats of s. </param>
            <param name="provider">An IFormatProvider that supplies culture-specific format information about s. </param>
            <param name="style">A bitwise combination of DateTimeStyles values that indicates the permitted format of s. A typical value to specify is None.</param>
            <returns>A DateTime equivalent to the date and time contained in s as specified by formats, provider, and style.</returns>
        </member>
        <member name="M:UnitWrappers.System.IDateTimeSystem.TryParse(System.String,System.DateTime@)">
            <summary>
            Converts the specified string representation of a date and time to its DateTime equivalent and returns a value that indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a date and time to convert.</param>
            <param name="result">When this method returns, contains the DateTime value equivalent to the date and time contained in s, if the conversion succeeded, or MinValue if the conversion failed. The conversion fails if the s parameter is nullNothingnullptra null reference (Nothing in Visual Basic), is an empty string (""), or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
            <returns> true if the s parameter was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:UnitWrappers.System.IDateTimeSystem.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
            <summary>
            Converts the specified string representation of a date and time to its DateTime equivalent using the specified culture-specific format information and formatting style, and returns a value that indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a date and time to convert. </param>
            <param name="provider">An object that supplies culture-specific formatting information about s.</param>
            <param name="styles">A bitwise combination of enumeration values that defines how to interpret the parsed date in relation to the current time zone or the current date. A typical value to specify is None.</param>
            <param name="result">When this method returns, contains the DateTime value equivalent to the date and time contained in s, if the conversion succeeded, or MinValue if the conversion failed. The conversion fails if the s parameter is nullNothingnullptra null reference (Nothing in Visual Basic), is an empty string (""), or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
            <returns> true if the s parameter was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:UnitWrappers.System.IDateTimeSystem.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
            <summary>
            Converts the specified string representation of a date and time to its DateTime equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match at least one of the specified formats exactly. The method returns a value that indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a date and time to convert. </param>
            <param name="formats">An array of allowable formats of s. </param>
            <param name="provider">An IFormatProvider object that supplies culture-specific formatting information about s. </param>
            <param name="style">A bitwise combination of one or more enumeration values that indicate the permitted format of s. </param>
            <param name="result">When this method returns, contains the DateTime value equivalent to the date and time contained in s, if the conversion succeeded, or MinValue if the conversion failed. The conversion fails if s or formats is nullNothingnullptra null reference (Nothing in Visual Basic), s or an element of formats is an empty string, or the format of s is not exactly as specified by at least one of the format patterns in formats. This parameter is passed uninitialized.</param>
            <returns>true if the s parameter was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:UnitWrappers.System.IDateTimeSystem.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
            <summary>
            Converts the specified string representation of a date and time to its DateTime equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly. The method returns a value that indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a date and time to convert. </param>
            <param name="format">The required format of s. </param>
            <param name="provider">An IFormatProvider object that supplies culture-specific formatting information about s. </param>
            <param name="style">A bitwise combination of one or more enumeration values that indicate the permitted format of s. </param>
            <param name="result">When this method returns, contains the DateTime value equivalent to the date and time contained in s, if the conversion succeeded, or MinValue if the conversion failed. The conversion fails if either the s or format parameter is nullNothingnullptra null reference (Nothing in Visual Basic), is an empty string, or does not contain a date and time that correspond to the pattern specified in format. This parameter is passed uninitialized. </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="P:UnitWrappers.System.IDateTimeSystem.Now">
            <summary>
            Gets a DateTime object that is set to the current date and time on this computer, expressed as the local time.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IDateTimeSystem.Today">
            <summary>
            Gets the current date.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IDateTimeSystem.UtcNow">
            <summary>
            Gets a DateTime object that is set to the current date and time on this computer, expressed as the Coordinated 
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.IProcess.Close">
            <summary>
            Frees all the resources that are associated with this component.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.IProcess.Start">
            <summary>
            Starts (or reuses) the process resource that is specified by the StartInfo  property of this Process component and associates it with the component.
            </summary>
            <returns>true if a process resource is started; false if no new process resource is started (for example, if an existing process is reused).</returns>
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.IProcess.WaitForExit">
            <summary>
            Instructs the ProcessInstance  component to wait indefinitely for the associated process to exit.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.IProcess.WaitForExit(System.Int32)">
            <summary>
            Instructs the Process  component to wait the specified number of milliseconds for the associated process to exit.
            </summary>
            <param name="milliseconds">The amount of time, in milliseconds, to wait for the associated process to exit. The maximum is the largest possible value of a 32-bit integer, which represents infinity to the operating system.</param>
            <returns>true if the associated process has exited; otherwise, false.</returns>
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.IProcess.WaitForInputIdle">
            <summary>
            Causes the Process  component to wait indefinitely for the associated process to enter an idle state. This overload applies only to processes with a user interface and, therefore, a message loop.
            </summary>
            <returns>true if the associated process has reached an idle state.</returns>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.IProcess.StartInfo">
            <summary>
            Gets or sets the properties to pass to the Start  method of the Process.
            </summary>
        </member>
        <member name="T:UnitWrappers.System.Diagnostics.IProcessStartInfo">
            <summary>
            Description of IProcessStartInfo
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.IProcessStartInfo.Arguments">
            <summary>
            Gets or sets the set of command-line arguments to use when starting the application.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.IProcessStartInfo.FileName">
            <summary>
            Gets or sets the application or document to start.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.IProcessStartInfo.UnderlyingObject">
            <summary>
            Gets <see cref="T:System.Diagnostics.ProcessStartInfo"/> object.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.IProcessStartInfo.UseShellExecute">
            <summary>
            Gets or sets a value indicating whether to use the operating system shell to start the process.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.IProcessStartInfo.Verb">
            <summary>
            Gets or sets the verb to use when opening the application or document specified by the FileName property.
            </summary>
        </member>
        <member name="T:UnitWrappers.System.Diagnostics.IProcessSystem">
            <summary>
            Wraps static members of <see cref="T:System.Diagnostics.Process"/>.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.IProcessSystem.GetProcessesByName(System.String,System.String)">
            <summary>
            Creates an array of new <see cref="T:UnitWrappers.System.Diagnostics.IProcess"/> components and associates them with all the process resources on a remote computer that share the specified process name.
            </summary>
            <param name="processName">The friendly name of the process. </param>
            <param name="machineName">The name of a computer on the network. </param>
            <returns>An array of type <see cref="T:UnitWrappers.System.Diagnostics.IProcess"/> that represents the process resources running the specified application or file.</returns>
        </member>
        <member name="T:UnitWrappers.System.Diagnostics.ProcessStartInfoWrap">
            <summary>
             Wrapper for <see cref="T:System.Diagnostics.ProcessStartInfo"/> class.
            </summary>
             <remarks>
             Class is wrapped because underlying object uses environment variables and registry undre the hood. Not simple data holder.
             </remarks>
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ProcessStartInfoWrap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.Diagnostics.ProcessStartInfoWrap"/> class without specifying a file name with which to start the process. 
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ProcessStartInfoWrap.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.Diagnostics.ProcessStartInfoWrap"/> class and specifies a file name such as an application or document with which to start the process.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ProcessStartInfoWrap.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.Diagnostics.ProcessStartInfoWrap"/> class, specifies an application file name with which to start the process, and specifies a set of command-line arguments to pass to the application.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ProcessStartInfoWrap.#ctor(System.Diagnostics.ProcessStartInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.Diagnostics.ProcessStartInfoWrap"/> class with providing ProcessStartInfo instance. 
            </summary>
            <param name="processStartInfo">ProcessStartInfo instance</param>
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.ProcessStartInfoWrap.Arguments">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.ProcessStartInfoWrap.FileName">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.ProcessStartInfoWrap.UseShellExecute">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.ProcessStartInfoWrap.CreateNoWindow">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.ProcessStartInfoWrap.Domain">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.ProcessStartInfoWrap.EnvironmentVariables">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.ProcessStartInfoWrap.ErrorDialog">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.ProcessStartInfoWrap.ErrorDialogParentHandle">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.ProcessStartInfoWrap.LoadUserProfile">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.ProcessStartInfoWrap.Password">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.ProcessStartInfoWrap.RedirectStandardError">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.ProcessStartInfoWrap.RedirectStandardInput">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.ProcessStartInfoWrap.StandardErrorEncoding">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.ProcessStartInfoWrap.StandardOutputEncoding">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.ProcessStartInfoWrap.UserName">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.ProcessStartInfoWrap.Verb">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.ProcessStartInfoWrap.Verbs">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.ProcessStartInfoWrap.WindowStyle">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Diagnostics.ProcessStartInfoWrap.WorkingDirectory">
            <inheritdoc />
        </member>
        <member name="T:UnitWrappers.System.Diagnostics.ProcessSystem">
            <summary>
            Wraps static members of <see cref="T:System.Diagnostics.Process"/>
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ProcessSystem.Start(System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ProcessSystem.Start(UnitWrappers.System.Diagnostics.IProcessStartInfo)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ProcessSystem.Start(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ProcessSystem.Start(System.String,System.String,System.Security.SecureString,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ProcessSystem.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ProcessSystem.GetCurrentProcess">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ProcessSystem.GetProcessById(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ProcessSystem.GetProcessById(System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ProcessSystem.GetProcesses">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ProcessSystem.GetProcesses(System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ProcessSystem.GetProcessesByName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ProcessSystem.GetProcessesByName(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ProcessSystem.EnterDebugMode">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ProcessSystem.LeaveDebugMode">
            <inheritdoc />
        </member>
        <member name="T:UnitWrappers.System.Diagnostics.ProcessWrap">
            <summary>
             Wrapper for <see cref="T:System.Diagnostics.Process"/> class.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ProcessWrap.#ctor(System.Diagnostics.Process)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.Diagnostics.ProcessWrap"/> class from framework <see cref="T:System.Diagnostics.Process"/> class.
            </summary>
            <param name="process"></param>
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ProcessWrap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.Diagnostics.ProcessWrap"/> class.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Diagnostics.ProcessWrap.ToString">
            <summary>
            Formats the process's name as a string, combined with the parent component type, if applicable.
            
            </summary>
            
            <returns>
            The <see cref="P:System.Diagnostics.Process.ProcessName"/>, combined with the base component's <see cref="M:System.Object.ToString"/> return value.
            
            </returns>
            <exception cref="T:System.PlatformNotSupportedException"><see cref="M:System.Diagnostics.Process.ToString"/> is not supported on Windows 98.
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="E:UnitWrappers.System.Diagnostics.ProcessWrap.ErrorDataReceived">
            <inheritdoc/>
        </member>
        <member name="E:UnitWrappers.System.Diagnostics.ProcessWrap.Exited">
            <inheritdoc/>
        </member>
        <member name="T:UnitWrappers.System.EnvironmentWrap">
            <summary>
            Wraps <see cref="T:System.Environment"/>
            </summary>
        </member>
        <member name="T:UnitWrappers.System.IEnvironment">
            <summary>
            Provides information about, and means to manipulate, the current environment and platform. 
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IEnvironment.Exit(System.Int32)">
            <summary>
            Terminates this process and gives the underlying operating system the specified exit code.
            </summary>
            <param name="exitCode">Exit code to be given to the operating system.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have sufficient security permission to perform this function.</exception>
        </member>
        <member name="M:UnitWrappers.System.IEnvironment.FailFast(System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.IEnvironment.ExpandEnvironmentVariables(System.String)">
            <summary>
            Replaces the name of each environment variable embedded in the specified string with the string equivalent of the value of the variable, then returns the resulting string
            </summary>
            <param name="name">A string containing the names of zero or more environment variables. Each environment variable is quoted with the percent sign character (%).</param>
            <returns>A string with each environment variable replaced by its value.</returns>
            <exception cref="T:System.ArgumentNullException">name is null</exception>
        </member>
        <member name="M:UnitWrappers.System.IEnvironment.GetCommandLineArgs">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.IEnvironment.GetEnvironmentVariable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.IEnvironment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.IEnvironment.GetEnvironmentVariables">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.IEnvironment.GetEnvironmentVariables(System.EnvironmentVariableTarget)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.IEnvironment.GetFolderPath(System.Environment.SpecialFolder)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.IEnvironment.GetLogicalDrives">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.IEnvironment.SetEnvironmentVariable(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.IEnvironment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.IEnvironment.CommandLine">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.IEnvironment.CurrentDirectory">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.IEnvironment.ExitCode">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.IEnvironment.HasShutdownStarted">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.IEnvironment.Is64BitOperatingSystem">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.IEnvironment.Is64BitProcess">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.IEnvironment.SystemPageSize">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.IEnvironment.MachineName">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.IEnvironment.NewLine">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.IEnvironment.OSVersion">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.IEnvironment.ProcessorCount">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.IEnvironment.StackTrace">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.IEnvironment.SystemDirectory">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.IEnvironment.TickCount">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.IEnvironment.UserDomainName">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.IEnvironment.UserInteractive">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.IEnvironment.UserName">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.IEnvironment.Version">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.IEnvironment.WorkingSet">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.EnvironmentWrap.Exit(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.EnvironmentWrap.FailFast(System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.EnvironmentWrap.ExpandEnvironmentVariables(System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.EnvironmentWrap.GetCommandLineArgs">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.EnvironmentWrap.GetEnvironmentVariable(System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.EnvironmentWrap.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.EnvironmentWrap.GetEnvironmentVariables(System.EnvironmentVariableTarget)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.EnvironmentWrap.SetEnvironmentVariable(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.EnvironmentWrap.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.EnvironmentWrap.GetEnvironmentVariables">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.EnvironmentWrap.GetFolderPath(System.Environment.SpecialFolder)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.EnvironmentWrap.GetLogicalDrives">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.EnvironmentWrap.CommandLine">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.EnvironmentWrap.CurrentDirectory">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.EnvironmentWrap.ExitCode">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.EnvironmentWrap.SystemDirectory">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.EnvironmentWrap.HasShutdownStarted">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.EnvironmentWrap.Is64BitOperatingSystem">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.EnvironmentWrap.Is64BitProcess">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.EnvironmentWrap.SystemPageSize">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.EnvironmentWrap.MachineName">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.EnvironmentWrap.NewLine">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.EnvironmentWrap.OSVersion">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.EnvironmentWrap.ProcessorCount">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.EnvironmentWrap.StackTrace">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.EnvironmentWrap.TickCount">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.EnvironmentWrap.UserDomainName">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.EnvironmentWrap.UserInteractive">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.EnvironmentWrap.UserName">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.EnvironmentWrap.Version">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.EnvironmentWrap.WorkingSet">
            <inheritdoc />
        </member>
        <member name="T:UnitWrappers.System.IO.DirectoryInfoWrap">
            <summary>
            Wrapper for <see cref="T:System.IO.DirectoryInfo"/> class.
            </summary>
        </member>
        <member name="T:UnitWrappers.System.IO.IDirectoryInfo">
            <summary>
            Wrapper for <see cref="T:System.IO.DirectoryInfo"/> class.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectoryInfo.Create">
            <summary>
            Creates a directory.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectoryInfo.Create(UnitWrappers.System.Security.AccessControl.IDirectorySecurity)">
            <summary>
            Creates a directory using a DirectorySecurity object. 
            </summary>
            <param name="directorySecurity">The access control to apply to the directory.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectoryInfo.CreateObjRef(System.Type)">
            <summary>
            Creates an object that contains all the relevant information required to generate a proxy used to communicate with a remote object.
            </summary>
            <param name="requestedType">The <see cref="T:System.Type"/> of the object that the new <see cref="T:System.Runtime.Remoting.ObjRef"/> will reference. </param>
            <returns>Information required to generate a proxy.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectoryInfo.CreateSubdirectory(System.String)">
            <summary>
            Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the IDirectoryInfo class.
            </summary>
            <param name="path">The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name. </param>
            <returns>The last directory specified in <paramref name="path"/>.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectoryInfo.CreateSubdirectory(System.String,UnitWrappers.System.Security.AccessControl.IDirectorySecurity)">
            <summary>
            Creates a subdirectory or subdirectories on the specified path with the specified security. The specified path can be relative to this instance of the IDirectoryInfo class.
            </summary>
            <param name="path">The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name. </param>
            <param name="directorySecurity">The security to apply. </param>
            <returns>The last directory specified in <paramref name="path"/>.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectoryInfo.Delete">
            <summary>
            Deletes this <see cref="T:System.IO.DirectoryInfo"/> if it is empty.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectoryInfo.Delete(System.Boolean)">
            <summary>
            Deletes this instance of a IDirectoryInfo, specifying whether to delete subdirectories and files. 
            </summary>
            <param name="recursive">true to delete this directory, its subdirectories, and all files; otherwise, false.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectoryInfo.GetAccessControl">
            <summary>
            Gets a <see cref="T:UnitWrappers.System.Security.AccessControl.IDirectorySecurity"/> object that encapsulates the access control list (ACL) entries for the directory described by the current DirectoryInfo object.
            </summary>
            <returns>A <see cref="T:UnitWrappers.System.Security.AccessControl.IDirectorySecurity"/> object that encapsulates the access control rules for the directory.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectoryInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)">
            <summary>
            Gets a <see cref="T:UnitWrappers.System.Security.AccessControl.IDirectorySecurity"/> object that encapsulates the specified type of access control list (ACL) entries for the directory described by the current DirectoryInfo object. 
            </summary>
            <param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to receive</param>
            <returns>A <see cref="T:UnitWrappers.System.Security.AccessControl.IDirectorySecurity"/> object that encapsulates the access control rules for the file described by the path parameter.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectoryInfo.GetDirectories">
            <summary>
            Returns the subdirectories of the current directory.
            </summary>
            <returns>An array of <see cref="T:UnitWrappers.System.IO.IDirectoryInfo"/> objects. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectoryInfo.GetDirectories(System.String)">
            <summary>
            Returns an array of directories in the current DirectoryInfo matching the given search criteria. 
            </summary>
            <param name="searchPattern">The search string, such as "System*", used to search for all directories beginning with the word "System".</param>
            <returns>An array of type IDirectoryInfo matching <paramref name="searchPattern"/>.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)">
            <summary>
            Returns an array of directories in the current DirectoryInfo matching the given search criteria and using a value to determine whether to search subdirectories. 
            </summary>
            <param name="searchPattern">The search string, such as "System*", used to search for all directories beginning with the word "System".</param>
            <param name="searchOption">One of the values of the <see cref="T:System.IO.SearchOption"/> enumeration that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns></returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectoryInfo.GetFiles">
            <summary>
            Returns a file list from the current directory.
            </summary>
            <returns>An array of type <see cref="T:UnitWrappers.System.IO.IFileInfo"/> FileInfo. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectoryInfo.GetFiles(System.String)">
            <summary>
            Returns a file list from the current directory matching the given <paramref name="searchPattern"/>. 
            </summary>
            <param name="searchPattern">The search string, such as "*.txt".</param>
            <returns>An array of type <see cref="T:UnitWrappers.System.IO.IFileInfo"/>.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectoryInfo.GetFiles(System.String,System.IO.SearchOption)">
            <summary>
            Returns a file list from the current directory matching the given <paramref name="searchPattern"/> and using a value to determine whether to search subdirectories. 
            </summary>
            <param name="searchPattern">The search string, such as "System*", used to search for all directories beginning with the word "System".</param>
            <param name="searchOption">One of the values of the <see cref="T:System.IO.SearchOption"/> enumeration that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <returns>An array of type <see cref="T:UnitWrappers.System.IO.IFileInfo"/>.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectoryInfo.GetFileSystemInfos">
            <summary>
            Returns an array of strongly typed <see cref="T:System.IO.FileSystemInfo"/> entries representing all the files and subdirectories in a directory.
            </summary>
            <returns>An array of strongly typed <see cref="T:System.IO.FileSystemInfo"/> entries.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectoryInfo.GetFileSystemInfos(System.String)">
            <summary>
            Retrieves an array of strongly typed <see cref="T:System.IO.FileSystemInfo"/> objects representing the files and subdirectories matching the specified search criteria. 
            </summary>
            <param name="searchPattern">The search string, such as "System*", used to search for all directories beginning with the word "System".</param>
            <returns>An array of strongly typed <see cref="T:System.IO.FileSystemInfo"/> entries.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectoryInfo.GetLifetimeService">
            <summary>
            Retrieves the current lifetime service object that controls the lifetime policy for this instance.
            </summary>
            <returns>An object of type ILease used to control the lifetime policy for this instance. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectoryInfo.InitializeLifetimeService">
            <summary>
            Obtains a lifetime service object to control the lifetime policy for this instance. 
            </summary>
            <returns>An object of type ILease used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the LifetimeServices.LeaseManagerPollTime property.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectoryInfo.MoveTo(System.String)">
            <summary>
            Moves a <see cref="T:System.IO.DirectoryInfo"/> instance and its contents to a new path. 
            </summary>
            <param name="destDirName">The name and path to which to move this directory. The destination cannot be another disk volume or a directory with the identical name. It can be an existing directory to which you want to add this directory as a subdirectory.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectoryInfo.Refresh">
            <summary>
            Refreshes the state of the object.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectoryInfo.SetAccessControl(UnitWrappers.System.Security.AccessControl.IDirectorySecurity)">
            <summary>
            Applies access control list (ACL) entries described by a DirectorySecurity object to the directory described by the current DirectoryInfo object. 
            </summary>
            <param name="directorySecurity">A IDirectorySecurity object that describes an ACL entry to apply to the directory described by the path parameter. </param>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectoryInfo.ToString">
            <summary>
            Returns the original path that was passed by the user. 
            </summary>
            <returns>Returns the original path that was passed by the user.</returns>
        </member>
        <member name="P:UnitWrappers.System.IO.IDirectoryInfo.Attributes">
            <summary>
             Gets or sets the <see cref="T:System.IO.FileAttributes"/> of the current Gets or sets the creation time, in coordinated universal time (UTC), of the current FileSystemInfo object. . 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IDirectoryInfo.CreationTime">
            <summary>
            Gets or sets the creation time of the current <see cref="T:System.IO.FileSystemInfo"/> object.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IDirectoryInfo.CreationTimeUtc">
            <summary>
            Gets or sets the creation time, in coordinated universal time (UTC), of the current <see cref="T:System.IO.FileSystemInfo"/> object. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IDirectoryInfo.Exists">
            <summary>
             Gets a value indicating whether the directory exists. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IDirectoryInfo.Extension">
            <summary>
            Gets the string representing the extension part of the file.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IDirectoryInfo.FullName">
            <summary>
            Gets the full path of the directory or file.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IDirectoryInfo.LastAccessTime">
            <summary>
            Gets or sets the time the current file or directory was last accessed. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IDirectoryInfo.LastAccessTimeUtc">
            <summary>
            Gets or sets the time, in coordinated universal time (UTC), that the current file or directory was last accessed.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IDirectoryInfo.LastWriteTime">
            <summary>
            Gets or sets the time when the current file or directory was last written to.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IDirectoryInfo.LastWriteTimeUtc">
            <summary>
            Gets or sets the time, in coordinated universal time (UTC), when the current file or directory was last written to.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IDirectoryInfo.Name">
            <summary>
            Gets the name of this <see cref="T:System.IO.DirectoryInfo"/> instance. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IDirectoryInfo.Parent">
            <summary>
            Gets the parent directory of a specified subdirectory. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IDirectoryInfo.Root">
            <summary>
            A <see cref="T:UnitWrappers.System.IO.IDirectoryInfo"/> object representing the root of a path. 
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.DirectoryInfoWrap.#ctor(System.IO.DirectoryInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.IO.DirectoryInfoWrap"/> class on the specified path. 
            </summary>
            <param name="directoryInfo">A <see cref="T:System.IO.DirectoryInfo"/> object.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.DirectoryInfoWrap.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.IO.DirectoryInfoWrap"/> class on the specified path. 
            </summary>
            <param name="path">A string specifying the path on which to create the <see cref="T:UnitWrappers.System.IO.DirectoryInfoWrap"/>. </param>
        </member>
        <member name="T:UnitWrappers.System.IO.DirectoryWrap">
            <summary>
            Wrapper for <see cref="T:System.IO.Directory"/> class.
            </summary>
        </member>
        <member name="T:UnitWrappers.System.IO.IDirectory">
            <summary>
            Wrapper for <see cref="T:System.IO.Directory"/> class.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectory.CreateDirectory(System.String)">
            <summary>
            Creates all directories and subdirectories as specified by path. 
            </summary>
            <param name="path">The directory path to create.</param>
            <returns>A <see cref="T:UnitWrappers.System.IO.IDirectory"/> as specified by path.</returns>
            <exception cref="T:System.IO.IOException">
            The directory specified by <paramref name="path"/> is read-only. 
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">
            The caller does not have the required permission. 
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="path"/> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by InvalidPathChars.
            -or-
            <paramref name="path"/> is prefixed with, or contains only a colon character (:). 
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is null.
            </exception>
            <exception cref="T:System.IO.PathTooLongException">
            The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters.
            </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">
            The specified path is invalid (for example, it is on an unmapped drive). 
            </exception>
            <exception cref="T:System.NotSupportedException">
            <paramref name="path"/> contains a colon character (:) that is not part of a drive label ("C:\"). 
            </exception>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectory.CreateDirectory(System.String,UnitWrappers.System.Security.AccessControl.IDirectorySecurity)">
            <summary>
            Creates all the directories in the specified path, applying the specified Windows security. 
            </summary>
            <param name="path">The directory to create.</param>
            <param name="directorySecurity">The access control to apply to the directory.</param>
            <returns>A <see cref="T:UnitWrappers.System.IO.IDirectory"/> object representing the newly created directory. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectory.Delete(System.String)">
            <summary>
            Deletes an empty directory from a specified path. 
            </summary>
            <param name="path">The name of the empty directory to remove. This directory must be writable or empty. </param>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectory.Delete(System.String,System.Boolean)">
            <summary>
            Deletes the specified directory and, if indicated, any subdirectories in the directory. 
            </summary>
            <param name="path">The name of the directory to remove.</param>
            <param name="recursive">true to remove directories, subdirectories, and files in path; otherwise, false.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnitWrappers.System.IO.IDirectory.Exists(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:UnitWrappers.System.IO.IDirectory.GetAccessControl(System.String)" -->
        <member name="M:UnitWrappers.System.IO.IDirectory.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>
            Gets a <see cref="T:UnitWrappers.System.Security.AccessControl.IDirectorySecurity"/> object that encapsulates the access control list (ACL) entries for a specified directory. 
            </summary>
            <param name="path">The path to a directory containing a <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object that describes the file's access control list (ACL) information. </param>
            <param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections"/> values that specifies the type of access control list (ACL) information to receive. </param>
            <returns></returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectory.GetCreationTime(System.String)">
            <summary>
            Gets the creation date and time of a directory. 
            </summary>
            <param name="path">The path of the directory. </param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified directory. This value is expressed in local time. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectory.GetCreationTimeUtc(System.String)">
            <summary>
            Gets the creation date and time, in Coordinated Universal Time (UTC) format, of a directory. 
            </summary>
            <param name="path">The path of the directory. </param>
            <returns>A <see cref="T:System.DateTime"/> structure set to the creation date and time for the specified directory. This value is expressed in UTC time. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectory.GetCurrentDirectory">
            <summary>
            Gets the current working directory of the application. 
            </summary>
            <returns>A string containing the path of the current working directory.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnitWrappers.System.IO.IDirectory.GetDirectories(System.String)" -->
        <member name="M:UnitWrappers.System.IO.IDirectory.GetDirectories(System.String,System.String)">
            <summary>
            Gets an array of directories matching the specified search pattern from the current directory. 
            </summary>
            <param name="path">The path to search. </param>
            <param name="searchPattern">The search string to match against the names of files in path. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by DirectorySeparatorChar or AltDirectorySeparatorChar, nor can it contain any of the characters in InvalidPathChars.</param>
            <returns>A String array of directories matching the search pattern.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectory.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets an array of directories matching the specified search pattern from the current directory, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The path to search. </param>
            <param name="searchPattern">The search string to match against the names of files in path. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by DirectorySeparatorChar or AltDirectorySeparatorChar, nor can it contain any of the characters in InvalidPathChars.</param>
            <param name="searchOption">One of the SearchOption values that specifies whether the search operation should include all subdirectories or only the current directory. </param>
            <returns>A String array of directories matching the search pattern. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectory.GetDirectoryRoot(System.String)">
            <summary>
            Returns the volume information, root information, or both for the specified path.
            </summary>
            <param name="path">The path of a file or directory.</param>
            <returns>A string containing the volume information, root information, or both for the specified path.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectory.GetFiles(System.String)">
            <summary>
            Returns the names of files in the specified directory.
            </summary>
            <param name="path">The directory from which to retrieve the files. </param>
            <returns>A String array of file names in the specified directory. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectory.GetFiles(System.String,System.String)">
            <summary>
            Returns the names of files in the specified directory that match the specified search pattern.
            </summary>
            <param name="path">The directory to search. </param>
            <param name="searchPattern">The search string to match against the names of files in path. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by DirectorySeparatorChar or AltDirectorySeparatorChar, nor can it contain any of the characters in InvalidPathChars.</param>
            <returns>A String array containing the names of files in the specified directory that match the specified search pattern.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectory.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns the names of files in the specified directory that match the specified search pattern, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The directory to search. </param>
            <param name="searchPattern">The search string to match against the names of files in path. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by DirectorySeparatorChar or AltDirectorySeparatorChar, nor can it contain any of the characters in InvalidPathChars.</param>
            <param name="searchOption">One of the SearchOption values that specifies whether the search operation should include all subdirectories or only the current directory. </param>
            <returns>A String array containing the names of files in the specified directory that match the specified search pattern. File names include the full path.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectory.GetFileSystemEntries(System.String)">
            <summary>
            Returns the names of all files and subdirectories in the specified directory. 
            </summary>
            <param name="path">The directory for which file and subdirectory names are returned.</param>
            <returns>A String array containing the names of file system entries in the specified directory.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectory.GetFileSystemEntries(System.String,System.String)">
            <summary>
            Returns an array of file system entries matching the specified search criteria.
            </summary>
            <param name="path">The path to be searched. </param>
            <param name="searchPattern">The search string to match against the names of files in path. The searchPattern parameter cannot end in two periods ("..") or contain two periods ("..") followed by DirectorySeparatorChar or AltDirectorySeparatorChar, nor can it contain any of the characters in InvalidPathChars. </param>
            <returns>A String array of file system entries matching the search criteria. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectory.GetLastAccessTime(System.String)">
            <summary>
            Returns the date and time the specified file or directory was last accessed.
            </summary>
            <param name="path">The file or directory for which to obtain access date and time information. </param>
            <returns>A DateTime set to the date and time the specified file or directory was last accessed. This value is expressed in local time.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectory.GetLastAccessTimeUtc(System.String)">
            <summary>
            Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.
            </summary>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A DateTime set to the date and time the specified file or directory was last accessed. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectory.GetLastWriteTime(System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to.
            </summary>
            <param name="path">The file or directory for which to obtain modification date and time information. </param>
            <returns>A DateTime set to the date and time the specified file or directory was last written to. This value is expressed in local time.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectory.GetLastWriteTimeUtc(System.String)">
            <summary>
            Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last written to. 
            </summary>
            <param name="path">The file or directory for which to obtain modification date and time information.</param>
            <returns>A DateTime set to the date and time the specified file or directory was last written to. This value is expressed in UTC time.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnitWrappers.System.IO.IDirectory.GetLogicalDrives" -->
        <member name="M:UnitWrappers.System.IO.IDirectory.GetParent(System.String)">
            <summary>
            Retrieves the parent directory of the specified path, including both absolute and relative paths. 
            </summary>
            <param name="path">The path for which to retrieve the parent directory.</param>
            <returns>The parent directory, or nullNothingnullptra null reference (Nothing in Visual Basic) if path is the root directory, including the root of a UNC server or share name.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectory.Move(System.String,System.String)">
            <summary>
            Moves a file or a directory and its contents to a new location.
            </summary>
            <param name="sourceDirName">The path of the file or directory to move.</param>
            <param name="destDirName">The path to the new location for <paramref name="sourceDirName"/>. If <paramref name="sourceDirName"/> is a file, then <paramref name="destDirName"/> must also be a file name.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectory.SetAccessControl(System.String,UnitWrappers.System.Security.AccessControl.IDirectorySecurity)">
            <summary>
            Applies access control list (ACL) entries described by a <see cref="T:UnitWrappers.System.IO.IDirectory"/> object to the specified directory. 
            </summary>
            <param name="path">A directory to add or remove access control list (ACL) entries from.</param>
            <param name="directorySecurity">A <see cref="T:UnitWrappers.System.IO.IDirectory"/> object that describes an ACL entry to apply to the directory described by the path parameter.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectory.SetCreationTime(System.String,System.DateTime)">
            <summary>
            Sets the creation date and time for the specified file or directory.
            </summary>
            <param name="path">The file or directory for which to set the creation date and time information.</param>
            <param name="creationTime">A DateTime containing the value to set for the creation date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectory.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the creation date and time, in Coordinated Universal Time (UTC) format, for the specified file or directory. 
            </summary>
            <param name="path">The file or directory for which to set the creation date and time information. </param>
            <param name="creationTimeUtc">A DateTime containing the value to set for the creation date and time of path. This value is expressed in UTC time.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectory.SetCurrentDirectory(System.String)">
            <summary>
            Sets the application's current working directory to the specified directory. 
            </summary>
            <param name="path">The path to which the current working directory is set.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectory.SetLastAccessTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time the specified file or directory was last accessed.
            </summary>
            <param name="path">The file or directory for which to set the access date and time information. </param>
            <param name="lastAccessTime">A DateTime containing the value to set for the access date and time of path. This value is expressed in local time.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectory.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.
            </summary>
            <param name="path">The file or directory for which to set the access date and time information.</param>
            <param name="lastAccessTimeUtc">A DateTime containing the value to set for the access date and time of path. This value is expressed in UTC time.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectory.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time a directory was last written to.
            </summary>
            <param name="path">The path of the directory.</param>
            <param name="lastWriteTime">The date and time the directory was last written to. This value is expressed in local time.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IDirectory.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in Coordinated Universal Time (UTC) format, that a directory was last written to. 
            </summary>
            <param name="path">The path of the directory.</param>
            <param name="lastWriteTimeUtc">The date and time the directory was last written to. This value is expressed in UTC time.</param>
        </member>
        <member name="T:UnitWrappers.System.IO.IFileInfoSystem">
            <summary>
            
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.IFileInfoSystem.CreateFileInfo(System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:UnitWrappers.System.IO.FileInfoWrap">
            <summary>
            Wrapper for <see cref="T:System.IO.FileInfo"/> class.
            </summary>
        </member>
        <member name="T:UnitWrappers.System.IO.IFileInfo">
            <summary>
            Wrapper for <see cref="T:System.IO.FileInfo"/> class.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.IFileInfo.AppendText">
            <summary>
            Creates a StreamWriterBase that appends text to the file represented by this instance of the IFileInfo.
            </summary>
            <returns>A new StreamWriterBase.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFileInfo.CopyTo(System.String)">
            <summary>
            Copies an existing file to a new file, disallowing the overwriting of an existing file.
            </summary>
            <param name="destFileName">The name of the new file to copy to.</param>
            <returns>A new file with a fully qualified path.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFileInfo.CopyTo(System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file, allowing the overwriting of an existing file. 
            </summary>
            <param name="destFileName">The name of the new file to copy to.</param>
            <param name="overwrite"> true to allow an existing file to be overwritten; otherwise, false. </param>
            <returns>A new file, or an overwrite of an existing file if overwrite is true. If the file exists and overwrite is false, an IOException is thrown.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFileInfo.Create">
            <summary>
            Creates a file.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFileInfo.CreateText">
            <summary>
            Creates a StreamWriterBase that writes a new text file.
            </summary>
            <returns>A new StreamWriterBase.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFileInfo.Decrypt">
            <summary>
            Decrypts a file that was encrypted by the current account using the Encrypt method. 
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.IFileInfo.Delete">
            <summary>
            Permanently deletes a file.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.IFileInfo.Encrypt">
            <summary>
            Encrypts a file so that only the account used to encrypt the file can decrypt it. 
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.IFileInfo.GetAccessControl">
            <summary>
            Gets a IFileSecurity object that encapsulates the access control list (ACL) entries for the file described by the current IFileInfo object. 
            </summary>
            <returns>A IFileSecurity object that encapsulates the access control rules for the current file. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFileInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)">
            <summary>
            Gets a IFileSecurity object that encapsulates the access control list (ACL) entries for the file described by the current IFileInfo object. 
            </summary>
            <param name="includeSections">One of the AccessControlSections values that specifies which group of access control entries to retrieve. </param>
            <returns>A IFileSecurity object that encapsulates the access control rules for the current file. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFileInfo.MoveTo(System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name. 
            </summary>
            <param name="destFileName">The path to move the file to, which can specify a different file name.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IFileInfo.Open(System.IO.FileMode)">
            <summary>
            Opens a file in the specified mode.
            </summary>
            <param name="mode">A FileMode constant specifying the mode (for example, Open or Append) in which to open the file.</param>
            <returns>A file opened in the specified mode, with read/write access and unshared. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFileInfo.Open(System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a file in the specified mode.
            </summary>
            <param name="mode">A FileMode constant specifying the mode (for example, Open or Append) in which to open the file.</param>
            <param name="access">A FileAccess constant specifying whether to open the file with Read, Write, or ReadWrite file access.</param>
            <returns>A file opened in the specified mode, with read/write access and unshared. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens a file in the specified mode.
            </summary>
            <param name="mode">A FileMode constant specifying the mode (for example, Open or Append) in which to open the file.</param>
            <param name="access">A FileAccess constant specifying whether to open the file with Read, Write, or ReadWrite file access.</param>
            <param name="share">A FileShare constant specifying the type of access other FileStream objects have to this file.</param>
            <returns>A file opened in the specified mode, with read/write access and unshared. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFileInfo.OpenRead">
            <summary>
            Creates a read-only FileStreamBase. 
            </summary>
            <returns>A new read-only FileStreamBase object. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFileInfo.OpenText">
            <summary>
            Creates a IStreamReader with UTF8 encoding that reads from an existing text file.
            </summary>
            <returns>A new IStreamReader with UTF8 encoding. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFileInfo.OpenWrite">
            <summary>
            Creates a write-only FileStreamBase. 
            </summary>
            <returns>A new write-only unshared FileStreamBase object.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFileInfo.Refresh">
            <summary>
            Refreshes the state of the object.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.IFileInfo.Replace(System.String,System.String)">
            <summary>
            Replaces the contents of a specified file with the file described by the current IFileInfo object, deleting the original file, and creating a backup of the replaced file.
            </summary>
            <param name="destinationFileName">The name of a file to replace with the current file.</param>
            <param name="destinationBackupFileName">The name of a file with which to create a backup of the file described by the destFileName parameter.</param>
            <returns>A IFileInfo object that encapsulates information about the file described by the destFileName parameter.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFileInfo.Replace(System.String,System.String,System.Boolean)">
            <summary>
            Replaces the contents of a specified file with the file described by the current FileInfo object, deleting the original file, and creating a backup of the replaced file. Also specifies whether to ignore merge errors.
            </summary>
            <param name="destinationFileName">The name of a file to replace with the current file.</param>
            <param name="destinationBackupFileName">The name of a file with which to create a backup of the file described by the destFileName parameter.</param>
            <param name="ignoreMetadataErrors"> true to ignore merge errors (such as attributes and ACLs) from the replaced file to the replacement file; otherwise false.</param>
            <returns>A IFileInfo object that encapsulates information about the file described by the destFileName parameter.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFileInfo.SetAccessControl(UnitWrappers.System.Security.AccessControl.IFileSecurity)">
            <summary>
            Applies access control list (ACL) entries described by a IFileSecurity object to the file described by the current IFileInfo object. 
            </summary>
            <param name="fileSecurity">A IFileSecurity object that describes an access control list (ACL) entry to apply to the current file.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IFileInfo.ToString">
            <summary>
            Returns the path as a string.
            </summary>
            <returns>A string representing the path.</returns>
        </member>
        <member name="P:UnitWrappers.System.IO.IFileInfo.Attributes">
            <summary>
             Gets or sets the <see cref="T:System.IO.FileAttributes"/> of the current Gets or sets the creation time, in coordinated universal time (UTC), of the current FileSystemInfo object. . 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IFileInfo.CreationTime">
            <summary>
            Gets or sets the creation time of the current <see cref="T:System.IO.FileSystemInfo"/> object.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IFileInfo.CreationTimeUtc">
            <summary>
            Gets or sets the creation time, in coordinated universal time (UTC), of the current <see cref="T:System.IO.FileSystemInfo"/> object. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IFileInfo.Directory">
            <summary>
            Gets an instance of the parent directory.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IFileInfo.DirectoryName">
            <summary>
            Gets a string representing the directory's full path.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IFileInfo.Exists">
            <summary>
            Gets a value indicating whether a file exists. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IFileInfo.Extension">
            <summary>
            Gets the string representing the extension part of the file.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IFileInfo.FullName">
            <summary>
            Gets the full path of the directory or file.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IFileInfo.IsReadOnly">
            <summary>
            Gets or sets a value that determines if the current file is read only.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IFileInfo.LastAccessTime">
            <summary>
            Gets or sets the time the current file or directory was last accessed. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IFileInfo.LastAccessTimeUtc">
            <summary>
            Gets or sets the time, in coordinated universal time (UTC), that the current file or directory was last accessed.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IFileInfo.LastWriteTime">
            <summary>
            Gets or sets the time when the current file or directory was last written to.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IFileInfo.LastWriteTimeUtc">
            <summary>
            Gets or sets the time, in coordinated universal time (UTC), when the current file or directory was last written to.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IFileInfo.Length">
            <summary>
            Gets the size, in bytes, of the current file.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IFileInfo.Name">
            <summary>
            Gets the name of the file. 
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.FileInfoWrap.#ctor(System.IO.FileInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.IO.FileInfoWrap"/> class on the specified path. 
            </summary>
            <param name="fileInfo">A <see cref="T:System.IO.FileInfo"/> object.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.FileInfoWrap.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.IO.FileInfoWrap"/> class on the specified path. 
            </summary>
            <param name="fileName">The fully qualified name of the new file, or the relative file name.</param>
        </member>
        <member name="T:UnitWrappers.System.IO.FileStreamWrap">
            <summary>
            Wrapper for <see cref="T:System.IO.FileStream"/> class.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.FileStreamWrap.#ctor(System.IO.FileStream)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.IO.FileStreamWrap"/> class on the specified path. 
            </summary>
            <param name="fileStream">A <see cref="T:System.IO.FileStream"/> object.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.FileStreamWrap.#ctor(UnitWrappers.Microsoft.Win32.SafeHandles.ISafeFileHandle,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.IO.FileStreamWrap"/> class for the specified file handle, with the specified read/write permission. 
            </summary>
            <param name="handle">A file handle for the file that the current FileStream object will encapsulate. </param>
            <param name="access">A FileAccess constant that sets the CanRead and CanWrite properties of the FileStream object. </param>
        </member>
        <member name="M:UnitWrappers.System.IO.FileStreamWrap.#ctor(UnitWrappers.Microsoft.Win32.SafeHandles.ISafeFileHandle,System.IO.FileAccess,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.IO.FileStreamWrap"/> class for the specified file handle, with the specified read/write permission, and buffer size. 
            </summary>
            <param name="handle">A file handle for the file that the current FileStream object will encapsulate. </param>
            <param name="access">A FileAccess constant that sets the CanRead and CanWrite properties of the FileStream object. </param>
            <param name="bufferSize">A positive Int32 value greater than 0 indicating the buffer size. For bufferSize values between one and eight, the actual buffer size is set to eight bytes. </param>
        </member>
        <member name="M:UnitWrappers.System.IO.FileStreamWrap.#ctor(UnitWrappers.Microsoft.Win32.SafeHandles.ISafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.IO.FileStreamWrap"/> class for the specified file handle, with the specified read/write permission, and buffer size, and synchronous or asynchronous state. 
            </summary>
            <param name="handle">A file handle for the file that the current FileStream object will encapsulate. </param>
            <param name="access">A FileAccess constant that sets the CanRead and CanWrite properties of the FileStream object. </param>
            <param name="bufferSize">A positive Int32 value greater than 0 indicating the buffer size. For bufferSize values between one and eight, the actual buffer size is set to eight bytes. </param>
            <param name="isAsync"> true if the handle was opened asynchronously (that is, in overlapped I/O mode); otherwise, false. </param>
        </member>
        <member name="M:UnitWrappers.System.IO.FileStreamWrap.#ctor(System.String,System.IO.FileMode)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.IO.FileStreamWrap"/> class with the specified path and creation mode. 
            </summary>
            <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode">A FileMode constant that determines how to open or create the file.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.FileStreamWrap.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.IO.FileStreamWrap"/> class with the specified path and creation mode. 
            </summary>
            <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode">A FileMode constant that determines how to open or create the file.</param>
            <param name="access">A FileAccess constant that determines how the file can be accessed by the FileStream object. This gets the CanRead and CanWrite properties of the FileStream object. CanSeek is true if path specifies a disk file.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.FileStreamWrap.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.IO.FileStreamWrap"/> class with the specified path, creation mode, read/write permission, and sharing permission.
            </summary>
            <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode">A FileMode constant that determines how to open or create the file.</param>
            <param name="access">A FileAccess constant that determines how the file can be accessed by the FileStream object. This gets the CanRead and CanWrite properties of the FileStream object. CanSeek is true if path specifies a disk file.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by processes. </param>
        </member>
        <member name="M:UnitWrappers.System.IO.FileStreamWrap.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.IO.FileStreamWrap"/> class with the specified path, creation mode, read/write permission, and sharing permission, and buffer size.
            </summary>
            <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode">A FileMode constant that determines how to open or create the file.</param>
            <param name="access">A FileAccess constant that determines how the file can be accessed by the FileStream object. This gets the CanRead and CanWrite properties of the FileStream object. CanSeek is true if path specifies a disk file.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by processes. </param>
            <param name="bufferSize">A positive Int32 value greater than 0 indicating the buffer size. For bufferSize values between one and eight, the actual buffer size is set to eight bytes. </param>
        </member>
        <member name="M:UnitWrappers.System.IO.FileStreamWrap.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.IO.FileStreamWrap"/> class with the specified path, creation mode, read/write permission, and sharing permission, and buffer size.
            </summary>
            <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode">A FileMode constant that determines how to open or create the file.</param>
            <param name="access">A FileAccess constant that determines how the file can be accessed by the FileStream object. This gets the CanRead and CanWrite properties of the FileStream object. CanSeek is true if path specifies a disk file.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by processes. </param>
            <param name="bufferSize">A positive Int32 value greater than 0 indicating the buffer size. For bufferSize values between one and eight, the actual buffer size is set to eight bytes.</param>
            <param name="useAsync">A positive Int32 value greater than 0 indicating the buffer size. For bufferSize values between one and eight, the actual buffer size is set to eight bytes.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.FileStreamWrap.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.IO.FileStreamWrap"/> class with the specified path, creation mode, read/write and sharing permission, the access other FileStreams can have to the same file, the buffer size, and additional file options.
            </summary>
            <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode">A FileMode constant that determines how to open or create the file.</param>
            <param name="access">A FileAccess constant that determines how the file can be accessed by the FileStream object. This gets the CanRead and CanWrite properties of the FileStream object. CanSeek is true if path specifies a disk file.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by processes. </param>
            <param name="bufferSize">A positive Int32 value greater than 0 indicating the buffer size. For bufferSize values between one and eight, the actual buffer size is set to eight bytes.</param>
            <param name="options">A FileOptions value that specifies additional file options.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.FileStreamWrap.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.IO.FileStreamWrap"/> class with the specified path, creation mode, access rights and sharing permission, the buffer size, and additional file options.
            </summary>
            <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode">A FileMode constant that determines how to open or create the file.</param>
            <param name="rights">A FileSystemRights constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by processes. </param>
            <param name="bufferSize">A positive Int32 value greater than 0 indicating the buffer size. For bufferSize values between one and eight, the actual buffer size is set to eight bytes.</param>
            <param name="options">A FileOptions value that specifies additional file options.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.FileStreamWrap.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.IO.FileStreamWrap"/> class with the specified path, creation mode, access rights and sharing permission, the buffer size, additional file options, access control and audit security.
            </summary>
            <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode">A FileMode constant that determines how to open or create the file.</param>
            <param name="rights">A FileSystemRights constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by processes. </param>
            <param name="bufferSize">A positive Int32 value greater than 0 indicating the buffer size. For bufferSize values between one and eight, the actual buffer size is set to eight bytes.</param>
            <param name="options">A FileOptions value that specifies additional file options.</param>
            <param name="fileSecurity">A FileSecurity constant that determines the access control and audit security for the file.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:UnitWrappers.System.IO.FileStreamWrap.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" -->
        <member name="M:UnitWrappers.System.IO.FileStreamWrap.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous write. 
            </summary>
            <param name="array">The buffer to read data into.</param>
            <param name="offset">The byte offset in array at which to begin reading.</param>
            <param name="numBytes">The maximum number of bytes to read.</param>
            <param name="userCallback">The method to be called when the asynchronous read operation is completed.</param>
            <param name="stateObject">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An IAsyncResult that references the asynchronous write.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.FileStreamWrap.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. 
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.FileStreamWrap.EndRead(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous read to complete. 
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
            <returns>The number of bytes read from the stream, between 0 and the number of bytes you requested. Streams only return 0 at the end of the stream, otherwise, they should block until at least 1 byte is available.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.FileStreamWrap.EndWrite(System.IAsyncResult)">
            <summary>
            Ends an asynchronous write, blocking until the I/O operation has completed. 
            </summary>
            <param name="asyncResult">The pending asynchronous I/O request. </param>
        </member>
        <member name="M:UnitWrappers.System.IO.FileStreamWrap.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the file system.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.FileStreamWrap.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the stream and writes the data in a given buffer. 
            </summary>
            <param name="buffer">When this method returns, contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. </param>
            <param name="offset">The byte offset in array at which the read bytes will be placed. </param>
            <param name="count">The maximum number of bytes to read. </param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.FileStreamWrap.ReadByte">
            <summary>
            Reads a byte from the file and advances the read position one byte. 
            </summary>
            <returns>The byte, cast to an Int32, or -1 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.FileStreamWrap.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of this stream to the given value. 
            </summary>
            <param name="offset">The point relative to origin from which to begin seeking.</param>
            <param name="origin">Specifies the beginning, the end, or the current position as a reference point for origin, using a value of type SeekOrigin. </param>
            <returns>The new position in the stream.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.FileStreamWrap.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value.
            </summary>
            <param name="value">The new length of the stream.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.FileStreamWrap.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to this stream using data from a buffer.
            </summary>
            <param name="buffer">The buffer containing data to write to the stream.</param>
            <param name="offset">The zero-based byte offset in array at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.FileStreamWrap.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the file stream.
            </summary>
            <param name="value">A byte to write to the stream.</param>
        </member>
        <member name="P:UnitWrappers.System.IO.FileStreamWrap.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.FileStreamWrap.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.FileStreamWrap.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.FileStreamWrap.StreamInstance">
            <summary>
            Gets <see cref="T:System.IO.Stream"/> object.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.FileStreamWrap.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.FileStreamWrap.Position">
            <summary>
            Gets or sets the current position of this stream.
            </summary>
        </member>
        <member name="T:UnitWrappers.System.IO.IFileSystemWatcher">
            <summary>
            Wrapper for <see cref="T:System.IO.FileSystemWatcher"/> class.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.IFileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
            <summary> 
                  A synchronous method that returns a structure that
                  contains specific information on the change that occurred, given the type
                  of change that you wish to monitor. 
            </summary> 
        </member>
        <member name="M:UnitWrappers.System.IO.IFileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
            <summary>
                  A synchronous 
                  method that returns a structure that contains specific information on the change that occurred, given the
                  type of change that you wish to monitor and the time (in milliseconds) to wait before timing out. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IFileSystemWatcher.UnderlyingObject">
            <summary>
            Gets instance of FileSystemWatcher object.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IFileSystemWatcher.NotifyFilter">
            <summary> 
                  Gets or sets the type of changes to watch for. t
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IFileSystemWatcher.EnableRaisingEvents">
            <summary>
               Gets or sets a value indicating whether the component is enabled.
            </summary> 
        </member>
        <member name="P:UnitWrappers.System.IO.IFileSystemWatcher.Filter">
            <summary> 
               Gets or sets the filter string, used to determine what files are monitored in a directory.
            </summary> 
        </member>
        <member name="P:UnitWrappers.System.IO.IFileSystemWatcher.IncludeSubdirectories">
            <summary> 
                  Gets or sets a
                  value indicating whether subdirectories within the specified path should be monitored.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IFileSystemWatcher.InternalBufferSize">
            <summary>
               Gets or 
                  sets the size of the internal buffer. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IFileSystemWatcher.Path">
            <summary> 
               Gets or sets the path of the directory to watch.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.IFileSystemWatcher.SynchronizingObject">
            <summary> 
                  Gets or sets the object used to marshal the event handler calls issued as a 
                  result of a directory change. 
            </summary> 
        </member>
        <member name="E:UnitWrappers.System.IO.IFileSystemWatcher.Changed">
            <summary> 
                  Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path"/> 
                  is changed.
            </summary>
        </member>
        <member name="E:UnitWrappers.System.IO.IFileSystemWatcher.Created">
            <summary>
                  Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path"/> 
                  is created.
            </summary>
        </member>
        <member name="E:UnitWrappers.System.IO.IFileSystemWatcher.Deleted">
            <summary>
                  Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path"/>
                  is deleted. 
            </summary>
        </member>
        <member name="E:UnitWrappers.System.IO.IFileSystemWatcher.Error">
            <summary>
                  Occurs when the internal buffer overflows.
            </summary>
        </member>
        <member name="E:UnitWrappers.System.IO.IFileSystemWatcher.Renamed">
            <summary> 
                  Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path"/> 
                  is renamed.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.FileSystemWatcherWrap.#ctor">
            <summary> 
            Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher"/> class. 
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.FileSystemWatcherWrap.#ctor(System.String)">
            <summary>
                  Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher"/> class, 
                  given the specified directory to monitor.  
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.FileSystemWatcherWrap.#ctor(System.String,System.String)">
            <summary>    
                  Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher"/> class,
                  given the specified directory and type of files to monitor.
            </summary> 
        </member>
        <member name="M:UnitWrappers.System.IO.FileSystemWatcherWrap.BeginInit">
            <summary>
               Notifies the object that initialization is beginning and tells it to standby. 
            </summary> 
        </member>
        <member name="M:UnitWrappers.System.IO.FileSystemWatcherWrap.EndInit">
            <summary> 
               
                  Notifies the object that initialization is complete.
               
            </summary> 
        </member>
        <member name="M:UnitWrappers.System.IO.FileSystemWatcherWrap.WaitForChanged(System.IO.WatcherChangeTypes)">
            <summary> 
                  A synchronous method that returns a structure that
                  contains specific information on the change that occurred, given the type
                  of change that you wish to monitor. 
            </summary> 
        </member>
        <member name="M:UnitWrappers.System.IO.FileSystemWatcherWrap.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
            <summary>
                  A synchronous 
                  method that returns a structure that contains specific information on the change that occurred, given the
                  type of change that you wish to monitor and the time (in milliseconds) to wait before timing out. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.FileSystemWatcherWrap.NotifyFilter">
            <summary> 
                  Gets or sets the type of changes to watch for. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.FileSystemWatcherWrap.EnableRaisingEvents">
            <summary>
               Gets or sets a value indicating whether the component is enabled.
            </summary> 
        </member>
        <member name="P:UnitWrappers.System.IO.FileSystemWatcherWrap.Filter">
            <summary> 
               Gets or sets the filter string, used to determine what files are monitored in a directory.
            </summary> 
        </member>
        <member name="P:UnitWrappers.System.IO.FileSystemWatcherWrap.IncludeSubdirectories">
            <summary> 
                  Gets or sets a
                  value indicating whether subdirectories within the specified path should be monitored.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.FileSystemWatcherWrap.InternalBufferSize">
            <summary>
               Gets or 
                  sets the size of the internal buffer. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.FileSystemWatcherWrap.Path">
            <summary> 
               Gets or sets the path of the directory to watch.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.IO.FileSystemWatcherWrap.SynchronizingObject">
            <summary> 
                  Gets or sets the object used to marshal the event handler calls issued as a 
                  result of a directory change. 
            </summary> 
        </member>
        <member name="E:UnitWrappers.System.IO.FileSystemWatcherWrap.Changed">
            <summary> 
                  Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path"/> 
                  is changed.
            </summary>
        </member>
        <member name="E:UnitWrappers.System.IO.FileSystemWatcherWrap.Created">
            <summary>
                  Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path"/> 
                  is created.
            </summary>
        </member>
        <member name="E:UnitWrappers.System.IO.FileSystemWatcherWrap.Deleted">
            <summary>
                  Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path"/>
                  is deleted. 
            </summary>
        </member>
        <member name="E:UnitWrappers.System.IO.FileSystemWatcherWrap.Error">
            <summary>
                  Occurs when the internal buffer overflows.
            </summary>
        </member>
        <member name="E:UnitWrappers.System.IO.FileSystemWatcherWrap.Renamed">
            <summary> 
                  Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path"/> 
                  is renamed.
            </summary>
        </member>
        <member name="T:UnitWrappers.System.IO.FileWrap">
            <summary>
            Wrapper for <see cref="T:System.IO.File"/> class.
            </summary>
        </member>
        <member name="T:UnitWrappers.System.IO.IFile">
            <summary>
            Wrapper for <see cref="T:System.IO.File"/> class.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.AppendAllText(System.String,System.String)">
            <summary>
            Opens a file, appends the specified string to the file, and then closes the file. If the file does not exist, this method creates a file, writes the specified string to the file, then closes the file.
            </summary>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Appends the specified string to the file, creating the file if it does not already exist.
            </summary>
            <param name="path">The file to append the specified string to.</param>
            <param name="contents">The string to append to the file.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.AppendText(System.String)">
            <summary>
            Creates a StreamWriterBase that appends UTF-8 encoded text to an existing file. 
            </summary>
            <param name="path">The path to the file to append to.</param>
            <returns>A StreamWriterBase that appends UTF-8 encoded text to an existing file.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.Copy(System.String,System.String)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is not allowed.
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destFileName">The name of the destination file. This cannot be a directory or an existing file.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.Copy(System.String,System.String,System.Boolean)">
            <summary>
            Copies an existing file to a new file. Overwriting a file of the same name is allowed. 
            </summary>
            <param name="sourceFileName">The file to copy.</param>
            <param name="destFileName">The name of the destination file. This cannot be a directory.</param>
            <param name="overwrite"> true if the destination file can be overwritten; otherwise, false.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.Create(System.String)">
            <summary>
            Creates or overwrites a file in the specified path.
            </summary>
            <param name="path">The path and name of the file to create.</param>
            <returns>A FileStreamBase that provides read/write access to the file specified in path.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.Create(System.String,System.Int32)">
            <summary>
            Creates or overwrites the specified file.
            </summary>
            <param name="path">The name of the file.</param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file. </param>
            <returns>A FileStreamBase with the specified buffer size that provides read/write access to the file specified in path. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.Create(System.String,System.Int32,System.IO.FileOptions)">
            <summary>
            Creates or overwrites the specified file, specifying a buffer size and a FileOptions value that describes how to create or overwrite the file. 
            </summary>
            <param name="path">The name of the file. </param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file. </param>
            <param name="options">One of the FileOptions values that describes how to create or overwrite the file. </param>
            <returns>A new file with the specified buffer size. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.Create(System.String,System.Int32,System.IO.FileOptions,UnitWrappers.System.Security.AccessControl.IFileSecurity)">
            <summary>
            Creates or overwrites the specified file with the specified buffer size, file options, and file security.
            </summary>
            <param name="path">The name of the file. </param>
            <param name="bufferSize">The number of bytes buffered for reads and writes to the file. </param>
            <param name="options">One of the FileOptions values that describes how to create or overwrite the file. </param>
            <param name="fileSecurity">One of the IFileSecurity values that determines the access control and audit security for the file. </param>
            <returns>A new file with the specified buffer size, file options, and file security. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.CreateText(System.String)">
            <summary>
            Creates or opens a file for writing UTF-8 encoded text. 
            </summary>
            <param name="path">The file to be opened for writing. </param>
            <returns>A StreamWriterBase that writes to the specified file using UTF-8 encoding. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.Decrypt(System.String)">
            <summary>
            Decrypts a file that was encrypted by the current account using the Encrypt method. 
            </summary>
            <param name="path">A path that describes a file to decrypt.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.Delete(System.String)">
            <summary>
            Deletes the specified file. An exception is not thrown if the specified file does not exist.
            </summary>
            <param name="path">The name of the file to be deleted.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.Encrypt(System.String)">
            <summary>
            Encrypts a file so that only the account used to encrypt the file can decrypt it.
            </summary>
            <param name="path">A path that describes a file to encrypt.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.Exists(System.String)">
            <summary>
            Determines whether the specified file exists. 
            </summary>
            <param name="path">The file to check.</param>
            <returns> true if the caller has the required permissions and path contains the name of an existing file; otherwise, false. This method also returns false if path is nullNothingnullptra null reference (Nothing in Visual Basic), an invalid path, or a zero-length string. If the caller does not have sufficient permissions to read the specified file, no exception is thrown and the method returns false regardless of the existence of path.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.GetAccessControl(System.String)">
            <summary>
            Gets a IFileSecurity object that encapsulates the access control list (ACL) entries for a specified file.
            </summary>
            <param name="path">The path to a file containing a FileSecurity object that describes the file's access control list (ACL) information.</param>
            <returns>A IFileSecurity object that encapsulates the access control rules for the file described by the path parameter. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>
            Gets a IFileSecurity object that encapsulates the access control list (ACL) entries for a specified file.
            </summary>
            <param name="path">The path to a file containing a FileSecurity object that describes the file's access control list (ACL) information.</param>
            <param name="includeSections">One of the AccessControlSections values that specifies the type of access control list (ACL) information to receive.</param>
            <returns>A IFileSecurity object that encapsulates the access control rules for the file described by the path parameter.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.GetAttributes(System.String)">
            <summary>
            Gets the FileAttributes of the file on the path. 
            </summary>
            <param name="path">The path to the file.</param>
            <returns>The FileAttributes of the file on the path. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.GetCreationTime(System.String)">
            <summary>
            Returns the creation date and time of the specified file or directory.
            </summary>
            <param name="path">The file or directory for which to obtain creation date and time information.</param>
            <returns>A DateTime set to the creation date and time for the specified file or directory. This value is expressed in local time.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.GetCreationTimeUtc(System.String)">
            <summary>
            Returns the creation date and time, in coordinated universal time (UTC), of the specified file or directory.
            </summary>
            <param name="path">The file or directory for which to obtain creation date and time information.</param>
            <returns>A DateTime set to the creation date and time for the specified file or directory. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.GetLastAccessTime(System.String)">
            <summary>
            Returns the date and time the specified file or directory was last accessed. 
            </summary>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A DateTime set to the date and time that the specified file or directory was last accessed. This value is expressed in local time.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.GetLastAccessTimeUtc(System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last accessed.
            </summary>
            <param name="path">The file or directory for which to obtain access date and time information.</param>
            <returns>A DateTime set to the date and time that the specified file or directory was last accessed. This value is expressed in UTC time.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.GetLastWriteTime(System.String)">
            <summary>
            Returns the date and time the specified file or directory was last written to. 
            </summary>
            <param name="path">The file or directory for which to obtain write date and time information.</param>
            <returns>A DateTime set to the date and time that the specified file or directory was last written to. This value is expressed in local time.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.GetLastWriteTimeUtc(System.String)">
            <summary>
            Returns the date and time, in coordinated universal time (UTC), that the specified file or directory was last written to. 
            </summary>
            <param name="path">The file or directory for which to obtain write date and time information.</param>
            <returns>A DateTime set to the date and time that the specified file or directory was last written to. This value is expressed in UTC time. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.Move(System.String,System.String)">
            <summary>
            Moves a specified file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="sourceFileName">The name of the file to move.</param>
            <param name="destFileName">The new path for the file.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.Open(System.String,System.IO.FileMode)">
            <summary>
            Opens a FileStream on the specified path with read/write access. 
            </summary>
            <param name="path">The file to open. </param>
            <param name="mode">A FileMode value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. </param>
            <returns>A FileStream opened in the specified mode and path, with read/write access and not shared. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a FileStream on the specified path, with the specified mode and access.
            </summary>
            <param name="path">The file to open. </param>
            <param name="mode">A FileMode value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="access">A FileAccess value that specifies the operations that can be performed on the file. </param>
            <returns>An unshared FileStream that provides access to the specified file, with the specified mode and access.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens a FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. 
            </summary>
            <param name="path">The file to open. </param>
            <param name="mode">A FileMode value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. </param>
            <param name="access">A FileAccess value that specifies the operations that can be performed on the file. </param>
            <param name="share">A FileShare value specifying the type of access other threads have to the file. </param>
            <returns>A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.OpenRead(System.String)">
            <summary>
            Opens an existing file for reading. 
            </summary>
            <param name="path">The file to be opened for reading.</param>
            <returns>A read-only FileStream on the specified path. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.OpenText(System.String)">
            <summary>
            Opens an existing UTF-8 encoded text file for reading. 
            </summary>
            <param name="path">The file to be opened for reading. </param>
            <returns>A StreamReader on the specified path. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.OpenWrite(System.String)">
            <summary>
            Opens an existing file for writing. 
            </summary>
            <param name="path">The file to be opened for writing. </param>
            <returns>An unshared FileStream object on the specified path with Write access. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.ReadAllBytes(System.String)">
            <summary>
            Opens a binary file, reads the contents of the file into a byte array, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>A byte array containing the contents of the file.</returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.ReadAllLines(System.String)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file. 
            </summary>
            <param name="path">The file to open for reading. </param>
            <returns>A string array containing all lines of the file. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.ReadAllLines(System.String,System.Text.Encoding)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file. 
            </summary>
            <param name="path">The file to open for reading. </param>
            <param name="encoding">The encoding applied to the contents of the file. </param>
            <returns>A string array containing all lines of the file. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.ReadAllText(System.String)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file. 
            </summary>
            <param name="path">The file to open for reading. </param>
            <returns>A string containing all lines of the file. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.ReadAllText(System.String,System.Text.Encoding)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file. 
            </summary>
            <param name="path">The file to open for reading. </param>
            <param name="encoding">The encoding applied to the contents of the file. </param>
            <returns>A string array containing all lines of the file. </returns>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.Replace(System.String,System.String,System.String)">
            <summary>
            Replaces the contents of a specified file with the contents of another file, deleting the original file, and creating a backup of the replaced file.
            </summary>
            <param name="sourceFileName">The name of a file that replaces the file specified by destinationFileName. </param>
            <param name="destinationFileName">The name of the file being replaced. </param>
            <param name="destinationBackupFileName">The name of the backup file. </param>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.Replace(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Replaces the contents of a specified file with the contents of another file, deleting the original file, and creating a backup of the replaced file and optionally ignores merge errors.
            </summary>
            <param name="sourceFileName">The name of a file that replaces the file specified by destinationFileName. </param>
            <param name="destinationFileName">The name of the file being replaced. </param>
            <param name="destinationBackupFileName">The name of the backup file. </param>
            <param name="ignoreMetadataErrors">true to ignore merge errors (such as attributes and access control lists (ACLs)) from the replaced file to the replacement file; otherwise, false</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.SetAccessControl(System.String,UnitWrappers.System.Security.AccessControl.IFileSecurity)">
            <summary>
            Applies access control list (ACL) entries described by a IFileSecurity object to the specified file. 
            </summary>
            <param name="path">A file to add or remove access control list (ACL) entries from. </param>
            <param name="fileSecurity">A IFileSecurity object that describes an ACL entry to apply to the file described by the path parameter. </param>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.SetAttributes(System.String,System.IO.FileAttributes)">
            <summary>
            Sets the specified FileAttributes of the file on the specified path. 
            </summary>
            <param name="path">The path to the file. </param>
            <param name="fileAttributes">The desired FileAttributes, such as Hidden, ReadOnly, Normal, and Archive. </param>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.SetCreationTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time the file was created. 
            </summary>
            <param name="path">The file for which to set the creation date and time information. </param>
            <param name="creationTime">A DateTime containing the value to set for the creation date and time of path. This value is expressed in local time. </param>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the file was created. 
            </summary>
            <param name="path">The file for which to set the creation date and time information. </param>
            <param name="creationTimeUtc">A DateTime containing the value to set for the creation date and time of path. This value is expressed in UTC time.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.SetLastAccessTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time the specified file was last accessed. 
            </summary>
            <param name="path">The file for which to set the access date and time information. </param>
            <param name="lastAccessTime">A DateTime containing the value to set for the last access date and time of path. This value is expressed in local time. </param>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the specified file was last accessed. 
            </summary>
            <param name="path">The file for which to set the access date and time information. </param>
            <param name="lastAccessTimeUtc">A DateTime containing the value to set for the last access date and time of path. This value is expressed in UTC time. </param>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.SetLastWriteTime(System.String,System.DateTime)">
            <summary>
            Sets the date and time that the specified file was last written to. 
            </summary>
            <param name="path">The file for which to set the date and time information. </param>
            <param name="lastWriteTime">A DateTime containing the value to set for the last write date and time of path. This value is expressed in local time. </param>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>
            Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to. 
            </summary>
            <param name="path">The file for which to set the date and time information. </param>
            <param name="lastWriteTimeUtc">A DateTime containing the value to set for the last write date and time of path. This value is expressed in UTC time. </param>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.WriteAllBytes(System.String,System.Byte[])">
            <summary>
            Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to.</param>
            <param name="bytes">The bytes to write to the file.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.WriteAllLines(System.String,System.String[])">
            <summary>
            Creates a new file, write the specified string array to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to. </param>
            <param name="contents">The string array to write to the file. </param>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.WriteAllLines(System.String,System.String[],System.Text.Encoding)">
            <summary>
            Creates a new file, writes the specified string array to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to. </param>
            <param name="contents">The string array to write to the file. </param>
            <param name="encoding">An Encoding object that represents the character encoding applied to the string array. </param>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.WriteAllText(System.String,System.String)">
            <summary>
            Creates a new file, writes the specified string to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to. </param>
            <param name="contents">The string to write to the file. </param>
        </member>
        <member name="M:UnitWrappers.System.IO.IFile.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <summary>
            Creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="path">The file to write to. </param>
            <param name="contents">The string to write to the file. </param>
            <param name="encoding">An Encoding object that represents the encoding to apply to the string. </param>
        </member>
        <member name="T:UnitWrappers.System.IO.PathWrap">
            <summary>
            Wrapper for <see cref="T:System.IO.Path"/> class.
            </summary>
        </member>
        <member name="T:UnitWrappers.System.IO.StreamReaderWrap">
            <summary>
            Wrapper for <see cref="T:System.IO.StreamReader"/> class.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.StreamReaderWrap.#ctor(System.IO.StreamReader)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.IO.StreamReaderWrap"/> class on the specified path. 
            </summary>
            <param name="streamReader">A <see cref="T:System.IO.StreamReader"/> object.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.StreamReaderWrap.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.StreamReader"/> class for the specified stream.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.StreamReaderWrap.#ctor(System.String)">
            <summary>
            Initializes a new instance of the StreamReader class for the specified file name.
            </summary>
            <param name="path">The complete file path to be read.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.StreamReaderWrap.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the StreamReader class for the specified stream, with the specified byte order mark detection option.
            </summary>
            <param name="stream">The stream to be read. </param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.StreamReaderWrap.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the StreamReader class for the specified stream, with the specified character encoding.
            </summary>
            <param name="stream">The stream to be read.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.StreamReaderWrap.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the StreamReader class for the specified file name, with the specified byte order mark detection option.
            </summary>
            <param name="path">The complete file path to be read. </param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.StreamReaderWrap.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the StreamReader class for the specified file name, with the specified character encoding.
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.StreamReaderWrap.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the StreamReader class for the specified stream, with the specified character encoding and byte order mark detection option.
            </summary>
            <param name="stream">The stream to be read. </param>
            <param name="encoding">The character encoding to use. </param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.StreamReaderWrap.#ctor(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the StreamReader class for the specified file name, with the specified character encoding and byte order mark detection option. 
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="encoding">The character encoding to use. </param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.StreamReaderWrap.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the StreamReader class for the specified stream, with the specified character encoding and byte order mark detection option, and buffer size.
            </summary>
            <param name="stream">The stream to be read. </param>
            <param name="encoding">The character encoding to use. </param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
            <param name="bufferSize">The minimum buffer size. </param>
        </member>
        <member name="M:UnitWrappers.System.IO.StreamReaderWrap.#ctor(System.String,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the StreamReader class for the specified file name, with the specified character encoding and byte order mark detection option. 
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="encoding">The character encoding to use. </param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
            <param name="bufferSize">The minimum buffer size, in number of 16-bit characters.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.StreamReaderWrap.Close">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.IO.StreamReaderWrap.DiscardBufferedData">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.IO.StreamReaderWrap.Peek">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.IO.StreamReaderWrap.Read">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.IO.StreamReaderWrap.Read(System.Char[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.IO.StreamReaderWrap.ReadBlock(System.Char[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.IO.StreamReaderWrap.ReadLine">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.IO.StreamReaderWrap.ReadToEnd">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.IO.StreamReaderWrap.Dispose">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.IO.StreamReaderWrap.BaseStream">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.IO.StreamReaderWrap.CurrentEncoding">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.IO.StreamReaderWrap.EndOfStream">
            <inheritdoc />
        </member>
        <member name="T:UnitWrappers.System.IO.StreamWriterWrap">
            <summary>
            Wrapper for <see cref="T:System.IO.StreamWriter"/> class.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.IO.StreamWriterWrap.#ctor(System.IO.StreamWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.IO.StreamWriterWrap"/> class on the specified path. 
            </summary>
            <param name="streamWriter">A <see cref="T:System.IO.StreamWriter"/> object.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.StreamWriterWrap.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.IO.StreamWriterWrap"/> class for the specified stream, using UTF-8 encoding and the default buffer size.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.StreamWriterWrap.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.IO.StreamWriterWrap"/> class for the specified stream, using UTF-8 encoding and the default buffer size.
            </summary>
            <param name="path">The complete file path to write to. path can be a file name.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.StreamWriterWrap.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.IO.StreamWriterWrap"/> class for the specified stream, using the specified encoding and the default buffer size. 
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.StreamWriterWrap.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the StreamWriter class for the specified file on the specified path, using the default encoding and buffer size. If the file exists, it can be either overwritten or appended to. If the file does not exist, this constructor creates a new file.
            </summary>
            <param name="path">The complete file path to write to.</param>
            <param name="append">Determines whether data is to be appended to the file. If the file exists and append is false, the file is overwritten. If the file exists and append is true, the data is appended to the file. Otherwise, a new file is created.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.StreamWriterWrap.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)">
            <summary>
            Initializes a new instance of the StreamWriter class for the specified stream, using the specified encoding and buffer size. 
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="bufferSize">Sets the buffer size.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.StreamWriterWrap.#ctor(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the StreamWriter class for the specified file on the specified path, using the specified encoding and default buffer size. If the file exists, it can be either overwritten or appended to. If the file does not exist, this constructor creates a new file.
            </summary>
            <param name="path">The complete file path to write to.</param>
            <param name="append">Determines whether data is to be appended to the file. If the file exists and append is false, the file is overwritten. If the file exists and append is true, the data is appended to the file. Otherwise, a new file is created.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:UnitWrappers.System.IO.StreamWriterWrap.#ctor(System.String,System.Boolean,System.Text.Encoding,System.Int32)">
            <summary>
            Initializes a new instance of the StreamWriter class for the specified file on the specified path, using the specified encoding and buffer size. If the file exists, it can be either overwritten or appended to. If the file does not exist, this constructor creates a new file.
            </summary>
            <param name="path">The complete file path to write to.</param>
            <param name="append">Determines whether data is to be appended to the file. If the file exists and append is false, the file is overwritten. If the file exists and append is true, the data is appended to the file. Otherwise, a new file is created.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="bufferSize">Sets the buffer size.</param>
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.CancelAsync">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.CancelAsync(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.DownloadData(System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.DownloadData(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.DownloadDataAsync(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.DownloadDataAsync(System.Uri,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.DownloadFile(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.DownloadFile(System.Uri,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.DownloadFileAsync(System.Uri,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.DownloadFileAsync(System.Uri,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.DownloadString(System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.DownloadString(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.DownloadStringAsync(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.DownloadStringAsync(System.Uri,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.InitializeLifetimeService">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.OpenRead(System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.OpenRead(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.OpenReadAsync(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.OpenReadAsync(System.Uri,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.OpenWrite(System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.OpenWrite(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.OpenWrite(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.OpenWrite(System.Uri,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.OpenWriteAsync(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.OpenWriteAsync(System.Uri,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.OpenWriteAsync(System.Uri,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.UploadData(System.String,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.UploadData(System.String,System.String,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.UploadData(System.Uri,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.UploadData(System.Uri,System.String,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.UploadDataAsync(System.Uri,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.UploadDataAsync(System.Uri,System.String,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.UploadDataAsync(System.Uri,System.String,System.Byte[],System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.UploadFile(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.UploadFile(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.UploadFile(System.Uri,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.UploadFile(System.Uri,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.UploadFileAsync(System.Uri,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.UploadFileAsync(System.Uri,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.UploadFileAsync(System.Uri,System.String,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.UploadString(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.UploadString(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.UploadString(System.Uri,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.UploadString(System.Uri,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.UploadStringAsync(System.Uri,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.UploadStringAsync(System.Uri,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.UploadStringAsync(System.Uri,System.String,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.UploadValues(System.String,System.Collections.Specialized.NameValueCollection)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.UploadValues(System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.UploadValues(System.Uri,System.Collections.Specialized.NameValueCollection)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.UploadValues(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.UploadValuesAsync(System.Uri,System.Collections.Specialized.NameValueCollection)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.IWebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection,System.Object)">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Net.IWebClient.BaseAddress">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Net.IWebClient.Container">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Net.IWebClient.Credentials">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Net.IWebClient.Encoding">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Net.IWebClient.Headers">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Net.IWebClient.IsBusy">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Net.IWebClient.Proxy">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Net.IWebClient.QueryString">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Net.IWebClient.ResponseHeaders">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Net.IWebClient.UseDefaultCredentials">
            <inheritdoc />
        </member>
        <member name="E:UnitWrappers.System.Net.IWebClient.DownloadDataCompleted">
            <inheritdoc />
        </member>
        <member name="E:UnitWrappers.System.Net.IWebClient.DownloadFileCompleted">
            <inheritdoc />
        </member>
        <member name="E:UnitWrappers.System.Net.IWebClient.DownloadProgressChanged">
            <inheritdoc />
        </member>
        <member name="E:UnitWrappers.System.Net.IWebClient.DownloadStringCompleted">
            <inheritdoc />
        </member>
        <member name="E:UnitWrappers.System.Net.IWebClient.OpenReadCompleted">
            <inheritdoc />
        </member>
        <member name="E:UnitWrappers.System.Net.IWebClient.OpenWriteCompleted">
            <inheritdoc />
        </member>
        <member name="E:UnitWrappers.System.Net.IWebClient.UploadDataCompleted">
            <inheritdoc />
        </member>
        <member name="E:UnitWrappers.System.Net.IWebClient.UploadFileCompleted">
            <inheritdoc />
        </member>
        <member name="E:UnitWrappers.System.Net.IWebClient.UploadProgressChanged">
            <inheritdoc />
        </member>
        <member name="E:UnitWrappers.System.Net.IWebClient.UploadStringCompleted">
            <inheritdoc />
        </member>
        <member name="E:UnitWrappers.System.Net.IWebClient.UploadValuesCompleted">
            <inheritdoc />
        </member>
        <member name="T:UnitWrappers.System.Net.Sockets.SocketWrap">
            <summary>
            Wraps instance members of <see cref="T:System.Net.Sockets.Socket"/>
            </summary>
        </member>
        <member name="T:UnitWrappers.System.Net.WebClientWrap">
            <summary>
            Wraps <see cref="T:System.Net.WebClient"/>
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.CancelAsync">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.CancelAsync(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.Dispose">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.ToString">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.DownloadData(System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.DownloadData(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.DownloadDataAsync(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.DownloadDataAsync(System.Uri,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.DownloadFile(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.DownloadFile(System.Uri,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.DownloadFileAsync(System.Uri,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.DownloadFileAsync(System.Uri,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.DownloadString(System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.DownloadString(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.DownloadStringAsync(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.DownloadStringAsync(System.Uri,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.InitializeLifetimeService">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.OpenRead(System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.OpenRead(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.OpenReadAsync(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.OpenReadAsync(System.Uri,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.OpenWrite(System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.OpenWrite(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.OpenWrite(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.OpenWrite(System.Uri,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.OpenWriteAsync(System.Uri)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.OpenWriteAsync(System.Uri,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.OpenWriteAsync(System.Uri,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.UploadData(System.String,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.UploadData(System.String,System.String,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.UploadData(System.Uri,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.UploadData(System.Uri,System.String,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.UploadDataAsync(System.Uri,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.UploadDataAsync(System.Uri,System.String,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.UploadDataAsync(System.Uri,System.String,System.Byte[],System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.UploadFile(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.UploadFile(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.UploadFile(System.Uri,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.UploadFile(System.Uri,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.UploadFileAsync(System.Uri,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.UploadFileAsync(System.Uri,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.UploadFileAsync(System.Uri,System.String,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.UploadString(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.UploadString(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.UploadString(System.Uri,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.UploadString(System.Uri,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.UploadStringAsync(System.Uri,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.UploadStringAsync(System.Uri,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.UploadStringAsync(System.Uri,System.String,System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.UploadValues(System.String,System.Collections.Specialized.NameValueCollection)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.UploadValues(System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.UploadValues(System.Uri,System.Collections.Specialized.NameValueCollection)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.UploadValues(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.UploadValuesAsync(System.Uri,System.Collections.Specialized.NameValueCollection)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Net.WebClientWrap.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection,System.Object)">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Net.WebClientWrap.BaseAddress">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Net.WebClientWrap.Container">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Net.WebClientWrap.Credentials">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Net.WebClientWrap.Encoding">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Net.WebClientWrap.Headers">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Net.WebClientWrap.IsBusy">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Net.WebClientWrap.Proxy">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Net.WebClientWrap.QueryString">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Net.WebClientWrap.ResponseHeaders">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Net.WebClientWrap.Site">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Net.WebClientWrap.UseDefaultCredentials">
            <inheritdoc />
        </member>
        <member name="E:UnitWrappers.System.Net.WebClientWrap.Disposed">
            <inheritdoc />
        </member>
        <member name="E:UnitWrappers.System.Net.WebClientWrap.DownloadDataCompleted">
            <inheritdoc />
        </member>
        <member name="E:UnitWrappers.System.Net.WebClientWrap.DownloadFileCompleted">
            <inheritdoc />
        </member>
        <member name="E:UnitWrappers.System.Net.WebClientWrap.DownloadProgressChanged">
            <inheritdoc />
        </member>
        <member name="E:UnitWrappers.System.Net.WebClientWrap.DownloadStringCompleted">
            <inheritdoc />
        </member>
        <member name="E:UnitWrappers.System.Net.WebClientWrap.OpenReadCompleted">
            <inheritdoc />
        </member>
        <member name="E:UnitWrappers.System.Net.WebClientWrap.OpenWriteCompleted">
            <inheritdoc />
        </member>
        <member name="E:UnitWrappers.System.Net.WebClientWrap.UploadDataCompleted">
            <inheritdoc />
        </member>
        <member name="E:UnitWrappers.System.Net.WebClientWrap.UploadFileCompleted">
            <inheritdoc />
        </member>
        <member name="E:UnitWrappers.System.Net.WebClientWrap.UploadProgressChanged">
            <inheritdoc />
        </member>
        <member name="E:UnitWrappers.System.Net.WebClientWrap.UploadStringCompleted">
            <inheritdoc />
        </member>
        <member name="E:UnitWrappers.System.Net.WebClientWrap.UploadValuesCompleted">
            <inheritdoc />
        </member>
        <member name="T:UnitWrappers.System.Reflection.AssemblyNameWrap">
            <summary>
            Wrapper for <see cref="T:System.Reflection.AssemblyName"/> class.
            </summary>
        </member>
        <member name="T:UnitWrappers.System.Reflection.IAssemblyName">
            <summary>
            Wrapper for <see cref="T:System.Reflection.AssemblyName"/> class.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Reflection.IAssemblyName.Clone">
            <summary>
            Makes a copy of this IAssemblyName object. 
            </summary>
            <returns>An object that is a copy of this IAssemblyName object. </returns>
        </member>
        <member name="M:UnitWrappers.System.Reflection.IAssemblyName.GetAssemblyName(System.String)">
            <summary>
            Gets the AssemblyName for a given file. 
            </summary>
            <param name="assemblyFile">The path for the assembly whose AssemblyName is to be returned.</param>
            <returns>An IAssemblyName object representing the given file. </returns>
        </member>
        <member name="M:UnitWrappers.System.Reflection.IAssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets serialization information with all of the data needed to recreate an instance of this AssemblyName. 
            </summary>
            <param name="info">The object to be populated with serialization information. </param>
            <param name="context">The destination context of the serialization. </param>
        </member>
        <member name="M:UnitWrappers.System.Reflection.IAssemblyName.GetPublicKey">
            <summary>
            Gets the public key of the assembly. 
            </summary>
            <returns>An array of type byte containing the public key of the assembly. </returns>
        </member>
        <member name="M:UnitWrappers.System.Reflection.IAssemblyName.GetPublicKeyToken">
            <summary>
            Gets the public key token, which is the last 8 bytes of the SHA-1 hash of the public key under which the application or assembly is signed. 
            </summary>
            <returns>An array of type byte containing the public key token. </returns>
        </member>
        <member name="M:UnitWrappers.System.Reflection.IAssemblyName.OnDeserialization(System.Object)">
            <summary>
            Implements the ISerializable interface and is called back by the deserialization event when deserialization is complete. 
            </summary>
            <param name="sender">The source of the deserialization event. </param>
        </member>
        <member name="M:UnitWrappers.System.Reflection.IAssemblyName.ReferenceMatchesDefinition(UnitWrappers.System.Reflection.IAssemblyName,UnitWrappers.System.Reflection.IAssemblyName)">
            <summary>
            Returns a value indicating whether the loader resolves two assembly names to the same assembly. 
            </summary>
            <param name="reference">The reference assembly name. </param>
            <param name="definition"></param>
            <returns> true if the loader resolves definition to the same assembly as reference; otherwise, false. </returns>
        </member>
        <member name="M:UnitWrappers.System.Reflection.IAssemblyName.SetPublicKey(System.Byte[])">
            <summary>
            Sets the public key identifying the assembly. 
            </summary>
            <param name="publicKey">A byte array containing the public key of the assembly.</param>
        </member>
        <member name="M:UnitWrappers.System.Reflection.IAssemblyName.SetPublicKeyToken(System.Byte[])">
            <summary>
            Sets the public key token, which is the last 8 bytes of the SHA-1 hash of the public key under which the application or assembly is signed.
            </summary>
            <param name="publicKeyToken">A byte array containing the public key token of the assembly. </param>
        </member>
        <member name="M:UnitWrappers.System.Reflection.IAssemblyName.ToString">
            <summary>
            Returns the full name of the assembly, also known as the display name. 
            </summary>
            <returns>A String that is the full name of the assembly, or the class name if the full name of the assembly cannot be determined.</returns>
        </member>
        <member name="P:UnitWrappers.System.Reflection.IAssemblyName.CodeBase">
            <summary>
            Gets or sets the location of the assembly as a URL.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Reflection.IAssemblyName.CultureInfo">
            <summary>
            Gets or sets the culture supported by the assembly.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Reflection.IAssemblyName.EscapedCodeBase">
            <summary>
            Gets the URI, including escape characters, that represents the codebase. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Reflection.IAssemblyName.Flags">
            <summary>
            Gets or sets the attributes of the assembly. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Reflection.IAssemblyName.FullName">
            <summary>
            	 Gets the full name of the assembly, also known as the display name. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Reflection.IAssemblyName.HashAlgorithm">
            <summary>
            Gets or sets the hash algorithm used by the assembly manifest. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Reflection.IAssemblyName.KeyPair">
            <summary>
            Gets or sets the public and private cryptographic key pair that is used to create a strong name signature for the assembly. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Reflection.IAssemblyName.Name">
            <summary>
            Gets or sets the simple name of the assembly. This is usually, but not necessarily, the file name of the manifest file of the assembly, minus its extension.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Reflection.IAssemblyName.ProcessorArchitecture">
            <summary>
            Gets or sets a value that identifies the processor and bits-per-word of the platform targeted by an executable. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Reflection.IAssemblyName.Version">
            <summary>
            Gets or sets the major, minor, build, and revision numbers of the assembly.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Reflection.IAssemblyName.VersionCompatibility">
            <summary>
            Defines the different types of assembly version compatibility. This feature is not available in version 1.0 of the .NET Framework.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Reflection.AssemblyNameWrap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.Reflection.AssemblyNameWrap"/> class. 
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Reflection.AssemblyNameWrap.#ctor(System.Reflection.AssemblyName)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.Reflection.AssemblyNameWrap"/> class. 
            </summary>
            <param name="assemblyName">AssemblyName object.</param>
        </member>
        <member name="M:UnitWrappers.System.Reflection.AssemblyNameWrap.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.Reflection.AssemblyNameWrap"/> class. 
            </summary>
            <param name="assemblyName">The display name of the assembly, as returned by the FullName property.</param>
        </member>
        <member name="T:UnitWrappers.System.Reflection.AssemblySystem">
            <summary>
            Wraps static members of <see cref="T:System.Reflection.Assembly"/>
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Reflection.IAssemblySystem.GetAssembly(System.Type)">
            <summary>
            Gets the currently loaded assembly in which the specified class is defined. 
            </summary>
            <param name="type">A Type object representing a class in the assembly that will be returned.</param>
            <returns>The assembly in which the specified class is defined.</returns>
        </member>
        <member name="M:UnitWrappers.System.Reflection.IAssemblySystem.GetCallingAssembly">
            <summary>
            Returns the IAssembly of the method that invoked the currently executing method. 
            </summary>
            <returns>The Assembly object of the method that invoked the currently executing method.</returns>
        </member>
        <member name="M:UnitWrappers.System.Reflection.IAssemblySystem.GetEntryAssembly">
            <summary>
            Gets the process executable in the default application domain. In other application domains, this is the first executable that was executed by AppDomain.ExecuteAssembly.
            </summary>
            <returns>The Assembly that is the process executable in the default application domain, or the first executable that was executed by AppDomain.ExecuteAssembly. Can return nullNothingnullptra null reference (Nothing in Visual Basic) when called from unmanaged code. </returns>
        </member>
        <member name="M:UnitWrappers.System.Reflection.IAssemblySystem.GetExecutingAssembly">
            <summary>
            Gets the assembly that contains the code that is currently executing.
            </summary>
            <returns>A IAssembly representing the assembly that contains the code that is currently executing. </returns>
        </member>
        <member name="M:UnitWrappers.System.Reflection.IAssemblySystem.CreateQualifiedName(System.String,System.String)">
            <summary>
            Creates the name of a type qualified by the display name of its assembly.
            </summary>
            <param name="assemblyName">The display name of an assembly.</param>
            <param name="typeName">The full name of a type.</param>
            <returns>A String that is the full name of the type qualified by the display name of the assembly.</returns>
        </member>
        <member name="M:UnitWrappers.System.Reflection.IAssemblySystem.LoadFrom(System.String)">
            <summary>
            Loads an assembly given its file name or path. 
            </summary>
            <param name="assemblyFile">The name or path of the file that contains the manifest of the assembly.</param>
            <returns>The loaded assembly. </returns>
        </member>
        <member name="T:UnitWrappers.System.Reflection.AssemblyWrap">
            <summary>
            Wrapper for <see cref="T:System.Reflection.Assembly"/> class.
            </summary>
        </member>
        <member name="T:UnitWrappers.System.Reflection.IAssembly">
            <summary>
            Wrapper for <see cref="T:System.Reflection.Assembly"/> class.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Reflection.IAssembly.CreateInstance(System.String)">
            <summary>
            Locates the specified type from this assembly and creates an instance of it using the system activator, using case-sensitive search.
            </summary>
            <param name="typeName">The Type.FullName of the type to locate.</param>
            <returns>An instance of Object representing the type, with culture, arguments, binder, and activation attributes set to nullNothingnullptra null reference (Nothing in Visual Basic), and BindingFlags set to Public or Instance, or nullNothingnullptra null reference (Nothing in Visual Basic) if typeName is not found.</returns>
        </member>
        <member name="M:UnitWrappers.System.Reflection.IAssembly.CreateInstance(System.String,System.Boolean)">
            <summary>
            Locates the specified type from this assembly and creates an instance of it using the system activator, with optional case-sensitive search.
            </summary>
            <param name="typeName">The Type.FullName of the type to locate.</param>
            <param name="ignoreCase"> true to ignore the case of the type name; otherwise, false.</param>
            <returns>An instance of Object representing the type, with culture, arguments, binder, and activation attributes set to nullNothingnullptra null reference (Nothing in Visual Basic), and BindingFlags set to Public or Instance, or nullNothingnullptra null reference (Nothing in Visual Basic) if typeName is not found.</returns>
        </member>
        <member name="M:UnitWrappers.System.Reflection.IAssembly.CreateInstance(System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
            <summary>
            Locates the specified type from this assembly and creates an instance of it using the system activator, with optional case-sensitive search and having the specified culture, arguments, and binding and activation attributes.
            </summary>
            <param name="typeName">The Type.FullName of the type to locate.</param>
            <param name="ignoreCase"> true to ignore the case of the type name; otherwise, false.</param>
            <param name="bindingAttr">A bitmask that affects the way in which the search is conducted. The value is a combination of bit flags from BindingFlags.</param>
            <param name="binder">An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection. If binder is nullNothingnullptra null reference (Nothing in Visual Basic), the default binder is used.</param>
            <param name="args">An array of type Object containing the arguments to be passed to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to be invoked. If the default constructor is desired, args must be an empty array or nullNothingnullptra null reference (Nothing in Visual Basic).</param>
            <param name="culture">An instance of CultureInfo used to govern the coercion of types. If this is nullNothingnullptra null reference (Nothing in Visual Basic), the CultureInfo for the current thread is used. (This is necessary to convert a String that represents 1000 to a Double value, for example, since 1000 is represented differently by different cultures.)</param>
            <param name="activationAttributes">An array of one or more attributes that can participate in activation. Typically, an array that contains a single UrlAttribute object. The UrlAttribute specifies the URL that is required to activate a remote object.</param>
            <returns>An instance of Object representing the type and matching the specified criteria, or nullNothingnullptra null reference (Nothing in Visual Basic) if typeName is not found.</returns>
        </member>
        <member name="M:UnitWrappers.System.Reflection.IAssembly.Equals(System.Object)">
            <summary>
            Determines whether this assembly and the specified object are equal.
            </summary>
            <param name="o">The object to compare with this instance.</param>
            <returns> true if o is equal to this instance; otherwise, false.</returns>
        </member>
        <member name="M:UnitWrappers.System.Reflection.IAssembly.GetExportedTypes">
            <summary>
            Gets the public types defined in this assembly that are visible outside the assembly.
            </summary>
            <returns>An array of Type objects that represent the types defined in this assembly that are visible outside the assembly.</returns>
        </member>
        <member name="M:UnitWrappers.System.Reflection.IAssembly.GetFile(System.String)">
            <summary>
            Gets a FileStreamBase for the specified file in the file table of the manifest of this assembly.
            </summary>
            <param name="name">The name of the specified file. Do not include the path to the file.</param>
            <returns>A FileStreamBase for the specified file, or nullNothingnullptra null reference (Nothing in Visual Basic) if the file is not found.</returns>
        </member>
        <member name="M:UnitWrappers.System.Reflection.IAssembly.GetFiles">
            <summary>
            Gets the files in the file table of an assembly manifest.
            </summary>
            <returns>An array of FileStreamBase objects.</returns>
        </member>
        <member name="M:UnitWrappers.System.Reflection.IAssembly.GetFiles(System.Boolean)">
            <summary>
            Gets the files in the file table of an assembly manifest, specifying whether to include resource modules.
            </summary>
            <param name="getResourceModules"> true to include resource modules; otherwise, false.</param>
            <returns>An array of FileStreamBase objects.</returns>
        </member>
        <member name="M:UnitWrappers.System.Reflection.IAssembly.GetHashCode">
            <summary>
            Returns the hash code for this instance. 
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:UnitWrappers.System.Reflection.IAssembly.GetName">
            <summary>
            Gets an <see cref="T:UnitWrappers.System.Reflection.IAssemblyName"/> for this assembly. 
            </summary>
            <returns>An <see cref="T:UnitWrappers.System.Reflection.IAssemblyName"/> for this assembly. </returns>
        </member>
        <member name="M:UnitWrappers.System.Reflection.IAssembly.GetReferencedAssemblies">
            <summary>
            Gets the <see cref="T:UnitWrappers.System.Reflection.IAssemblyName"/> objects for all the assemblies referenced by this assembly. 
            </summary>
            <returns>An array of type <see cref="T:UnitWrappers.System.Reflection.IAssemblyName"/> containing all the assemblies referenced by this assembly.</returns>
        </member>
        <member name="P:UnitWrappers.System.Reflection.IAssembly.CodeBase">
            <summary>
            Gets the location of the assembly as specified originally, for example, in an <see cref="T:System.Reflection.AssemblyName"/> object.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Reflection.IAssembly.EntryPoint">
            <summary>
            Gets the entry point of this assembly. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Reflection.IAssembly.EscapedCodeBase">
            <summary>
            Gets the URI, including escape characters, that represents the codebase.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Reflection.IAssembly.FullName">
            <summary>
            Gets the display name of the assembly. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Reflection.IAssembly.GlobalAssemblyCache">
            <summary>
            Gets a value indicating whether the assembly was loaded from the global assembly cache. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Reflection.IAssembly.HostContext">
            <summary>
            Gets the host context with which the assembly was loaded. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Reflection.IAssembly.ImageRuntimeVersion">
            <summary>
            Gets a string representing the version of the common language runtime (CLR) saved in the file containing the manifest. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Reflection.IAssembly.Location">
            <summary>
            Gets the path or UNC location of the loaded file that contains the manifest. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Reflection.IAssembly.ManifestModule">
            <summary>
            Gets the module that contains the manifest for the current assembly. 
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Reflection.IAssembly.ReflectionOnly">
            <summary>
            Gets a <see cref="T:System.Boolean"/> value indicating whether this assembly was loaded into the reflection-only context. 
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Reflection.AssemblyWrap.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:UnitWrappers.System.Reflection.AssemblyWrap"/> class. 
            </summary>
            <param name="assembly">Assembly object.</param>
        </member>
        <member name="M:UnitWrappers.System.Security.AccessControl.IFileSystemSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.FileSystemAccessRule" /> class that represents a new access control rule for the specified user, with the specified access rights, access control, and flags.</summary>
            <returns>A new <see cref="T:System.Security.AccessControl.FileSystemAccessRule" /> object that represents a new access control rule for the specified user, with the specified access rights, access control, and flags.</returns>
            <param name="identityReference">An <see cref="T:System.Security.Principal.IdentityReference" /> object that represents a user account.</param>
            <param name="accessMask">An integer that specifies an access type.</param>
            <param name="isInherited">true if the access rule is inherited; otherwise, false.    </param>
            <param name="inheritanceFlags">One of the <see cref="T:System.Security.AccessControl.InheritanceFlags" /> values that specifies how to propagate access masks to child objects.</param>
            <param name="propagationFlags">One of the <see cref="T:System.Security.AccessControl.PropagationFlags" /> values that specifies how to propagate Access Control Entries (ACEs) to child objects.</param>
            <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> values that specifies whether access is allowed or denied.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" />, or <paramref name="type" /> parameters specify an invalid value.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="identityReference" /> parameter is null. -or-The <paramref name="accessMask" /> parameter is zero.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="identityReference" /> parameter is neither of type <see cref="T:System.Security.Principal.SecurityIdentifier" />, nor of a type such as <see cref="T:System.Security.Principal.NTAccount" /> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
        </member>
        <member name="M:UnitWrappers.System.Security.AccessControl.IFileSystemSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
            <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.FileSystemAuditRule" /> class representing the specified audit rule for the specified user.</summary>
            <returns>A new <see cref="T:System.Security.AccessControl.FileSystemAuditRule" /> object representing the specified audit rule for the specified user.</returns>
            <param name="identityReference">An <see cref="T:System.Security.Principal.IdentityReference" /> object that represents a user account.</param>
            <param name="accessMask">An integer that specifies an access type.</param>
            <param name="isInherited">true if the access rule is inherited; otherwise, false.    </param>
            <param name="inheritanceFlags">One of the <see cref="T:System.Security.AccessControl.InheritanceFlags" /> values that specifies how to propagate access masks to child objects.</param>
            <param name="propagationFlags">One of the <see cref="T:System.Security.AccessControl.PropagationFlags" /> values that specifies how to propagate Access Control Entries (ACEs) to child objects.</param>
            <param name="flags">One of the <see cref="T:System.Security.AccessControl.AuditFlags" /> values that specifies the type of auditing to perform.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" />, or <paramref name="flags" /> properties specify an invalid value.</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="identityReference" /> property is null. -or-The <paramref name="accessMask" /> property is zero.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="identityReference" /> property is neither of type <see cref="T:System.Security.Principal.SecurityIdentifier" />, nor of a type such as <see cref="T:System.Security.Principal.NTAccount" /> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
        </member>
        <member name="M:UnitWrappers.System.Security.AccessControl.IFileSystemSecurity.AddAccessRule(System.Security.AccessControl.FileSystemAccessRule)">
            <summary>Adds the specified access control list (ACL) permission to the current file or directory.</summary>
            <param name="rule">A <see cref="T:System.Security.AccessControl.FileSystemAccessRule" /> object that represents an access control list (ACL) permission to add to a file or directory. </param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is null.</exception>
        </member>
        <member name="M:UnitWrappers.System.Security.AccessControl.IFileSystemSecurity.SetAccessRule(System.Security.AccessControl.FileSystemAccessRule)">
            <summary>Sets the specified access control list (ACL) permission for the current file or directory. </summary>
            <param name="rule">A <see cref="T:System.Security.AccessControl.FileSystemAccessRule" /> object that represents an access control list (ACL) permission to set for a file or directory.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is null.</exception>
        </member>
        <member name="M:UnitWrappers.System.Security.AccessControl.IFileSystemSecurity.ResetAccessRule(System.Security.AccessControl.FileSystemAccessRule)">
            <summary>Adds the specified access control list (ACL) permission to the current file or directory and removes all matching ACL permissions.</summary>
            <param name="rule">A <see cref="T:System.Security.AccessControl.FileSystemAccessRule" /> object that represents an access control list (ACL) permission to add to a file or directory.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is null.</exception>
        </member>
        <member name="M:UnitWrappers.System.Security.AccessControl.IFileSystemSecurity.RemoveAccessRule(System.Security.AccessControl.FileSystemAccessRule)">
            <summary>Removes all matching allow or deny access control list (ACL) permissions from the current file or directory.</summary>
            <returns>true if the access rule was removed; otherwise, false.</returns>
            <param name="rule">A <see cref="T:System.Security.AccessControl.FileSystemAccessRule" /> object that represents an access control list (ACL) permission to remove from a file or directory.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is null.</exception>
        </member>
        <member name="M:UnitWrappers.System.Security.AccessControl.IFileSystemSecurity.RemoveAccessRuleAll(System.Security.AccessControl.FileSystemAccessRule)">
            <summary>Removes all access control list (ACL) permissions for the specified user from the current file or directory.</summary>
            <param name="rule">A <see cref="T:System.Security.AccessControl.FileSystemAccessRule" /> object that specifies a user whose access control list (ACL) permissions should be removed from a file or directory.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is null.</exception>
        </member>
        <member name="M:UnitWrappers.System.Security.AccessControl.IFileSystemSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.FileSystemAccessRule)">
            <summary>Removes a single matching allow or deny access control list (ACL) permission from the current file or directory.</summary>
            <param name="rule">A <see cref="T:System.Security.AccessControl.FileSystemAccessRule" /> object that specifies a user whose access control list (ACL) permissions should be removed from a file or directory.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is null.</exception>
        </member>
        <member name="M:UnitWrappers.System.Security.AccessControl.IFileSystemSecurity.AddAuditRule(System.Security.AccessControl.FileSystemAuditRule)">
            <summary>Adds the specified audit rule to the current file or directory.</summary>
            <param name="rule">A <see cref="T:System.Security.AccessControl.FileSystemAuditRule" />  object that represents an audit rule to add to a file or directory.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is null.</exception>
        </member>
        <member name="M:UnitWrappers.System.Security.AccessControl.IFileSystemSecurity.SetAuditRule(System.Security.AccessControl.FileSystemAuditRule)">
            <summary>Sets the specified audit rule for the current file or directory.</summary>
            <param name="rule">A <see cref="T:System.Security.AccessControl.FileSystemAuditRule" /> object that represents an audit rule to set for a file or directory.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is null.</exception>
        </member>
        <member name="M:UnitWrappers.System.Security.AccessControl.IFileSystemSecurity.RemoveAuditRule(System.Security.AccessControl.FileSystemAuditRule)">
            <summary>Removes all matching allow or deny audit rules from the current file or directory.</summary>
            <returns>true if the audit rule was removed; otherwise, false</returns>
            <param name="rule">A <see cref="T:System.Security.AccessControl.FileSystemAuditRule" />  object that represents an audit rule to remove from a file or directory.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is null.</exception>
        </member>
        <member name="M:UnitWrappers.System.Security.AccessControl.IFileSystemSecurity.RemoveAuditRuleAll(System.Security.AccessControl.FileSystemAuditRule)">
            <summary>Removes all audit rules for the specified user from the current file or directory.</summary>
            <param name="rule">A <see cref="T:System.Security.AccessControl.FileSystemAuditRule" /> object that specifies a user whose audit rules should be removed from a file or directory.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is null.</exception>
        </member>
        <member name="M:UnitWrappers.System.Security.AccessControl.IFileSystemSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.FileSystemAuditRule)">
            <summary>Removes a single matching allow or deny audit rule from the current file or directory.</summary>
            <param name="rule">A <see cref="T:System.Security.AccessControl.FileSystemAuditRule" />  object that represents an audit rule to remove from a file or directory.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is null.</exception>
        </member>
        <member name="P:UnitWrappers.System.Security.AccessControl.IFileSystemSecurity.AccessRightType">
            <summary>Gets the enumeration that the <see cref="T:System.Security.AccessControl.FileSystemSecurity" /> class uses to represent access rights.</summary>
            <returns>A <see cref="T:System.Type" /> object representing the <see cref="T:System.Security.AccessControl.FileSystemRights" /> enumeration.</returns>
        </member>
        <member name="P:UnitWrappers.System.Security.AccessControl.IFileSystemSecurity.AccessRuleType">
            <summary>Gets the enumeration that the <see cref="T:System.Security.AccessControl.FileSystemSecurity" /> class uses to represent access rules.</summary>
            <returns>A <see cref="T:System.Type" /> object representing the <see cref="T:System.Security.AccessControl.FileSystemAccessRule" /> class.</returns>
        </member>
        <member name="P:UnitWrappers.System.Security.AccessControl.IFileSystemSecurity.AuditRuleType">
            <summary>Gets the type that the <see cref="T:System.Security.AccessControl.FileSystemSecurity" /> class uses to represent audit rules.</summary>
            <returns>A <see cref="T:System.Type" /> object representing the <see cref="T:System.Security.AccessControl.FileSystemAuditRule" /> class.</returns>
        </member>
        <member name="T:UnitWrappers.System.Security.Permissions.IFileIOPermission">
            <summary>
            
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Security.Permissions.FileIOPermissionWrap.Union(System.Security.IPermission)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Security.Permissions.FileIOPermissionWrap.IsSubsetOf(System.Security.IPermission)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Security.Permissions.FileIOPermissionWrap.Assert">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Security.Permissions.FileIOPermissionWrap.Demand">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Security.Permissions.FileIOPermissionWrap.Deny">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Security.Permissions.FileIOPermissionWrap.PermitOnly">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Security.Permissions.FileIOPermissionWrap.ToXml">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Security.Permissions.FileIOPermissionWrap.FromXml(System.Security.SecurityElement)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Security.Permissions.FileIOPermissionWrap.Copy">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Security.Permissions.FileIOPermissionWrap.Intersect(System.Security.IPermission)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Security.Permissions.FileIOPermissionWrap.IsUnrestricted">
            <inheritdoc />
        </member>
        <member name="T:UnitWrappers.System.Security.Permissions.IPermissionsFactory">
            <summary>
            
            </summary>
        </member>
        <member name="T:UnitWrappers.System.Security.Permissions.PermissionsFactory">
            <summary>
            
            </summary>
        </member>
        <member name="T:UnitWrappers.System.Security.Principal.WindowsIdentityWrap">
            <summary>
            Wraps instance members of <see cref="T:System.Security.Principal.WindowsIdentity"/>
            </summary>
        </member>
        <member name="T:UnitWrappers.System.Threading.AutoResetEventSystem">
            <summary>
            
            </summary>
        </member>
        <member name="T:UnitWrappers.System.Threading.IAutoResetEvent">
            <summary>
            
            </summary>
        </member>
        <member name="T:UnitWrappers.System.Threading.IWaitHandle">
            <summary>
            Encapsulates operating system–specific objects that wait for exclusive access to shared resources.
            
            </summary>
        </member>
        <member name="T:UnitWrappers.System.Threading.IThread">
            <summary>
            
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Threading.IThread.CurrentCulture">
            <summary>
            Gets or sets the culture for the current thread.
            </summary>
            <value>
            A CultureInfo representing the culture for the current thread.
            </value>
        </member>
        <member name="P:UnitWrappers.System.Threading.IThread.ManagedThreadId">
            <summary>
            Gets a unique identifier for the current managed thread.
            </summary>
            <value>
            An integer that represents a unique identifier for this managed thread.
            </value>
        </member>
        <member name="P:UnitWrappers.System.Threading.IThread.IsAlive">
            <summary>
            Gets a value indicating the execution status of the current thread.
            </summary>
            <value>
            true if this thread has been started and has not terminated normally or aborted; otherwise, false.
            </value>
        </member>
        <member name="P:UnitWrappers.System.Threading.IThread.IsThreadPoolThread">
            <summary>
            Gets a value indicating whether or not a thread belongs to the managed thread pool.
            </summary>
            <value>
            true if this thread belongs to the managed thread pool; otherwise, false.
            </value>
        </member>
        <member name="P:UnitWrappers.System.Threading.IThread.ThreadState">
            <summary>
            Gets a value containing the states of the current thread.
            </summary>
            <value>
            One of the <see cref="T:System.Threading.ThreadState"/> values indicating the state of the current thread. The initial value is Unstarted.
            </value>
        </member>
        <member name="P:UnitWrappers.System.Threading.IThread.IsBackground">
            <summary>
            Gets or sets a value indicating whether or not a thread is a background thread.
            </summary>
            <value>
            true if this thread is or is to become a background thread; otherwise, false.
            </value>
        </member>
        <member name="P:UnitWrappers.System.Threading.IThread.Priority">
            <summary>
            Gets or sets a value indicating the scheduling priority of a thread.
            </summary>
            <value>
            One of the <see cref="T:System.Threading.ThreadPriority"/> values. The default value is Normal.
            </value>
        </member>
        <member name="M:UnitWrappers.System.Threading.IThreadSystem.Sleep(System.Int32)">
            <summary>
            Suspends the current thread for a specified time.
            </summary>
            <param name="millisecondsTimeout">The number of milliseconds for which the thread is blocked. Specify zero (0) to indicate that this thread should be suspended to allow other waiting threads to execute. Specify Infinite  to block the thread indefinitely.</param>
        </member>
        <member name="M:UnitWrappers.System.Threading.IThreadSystem.Sleep(System.TimeSpan)">
            <summary>
            Blocks the current thread for a specified time.
            </summary>
            <param name="timeout">A TimeSpan  set to the amount of time for which the thread is blocked. Specify zero to indicate that this thread should be suspended to allow other waiting threads to execute. Specify Timeout.Infinite to block the thread indefinitely.</param>
        </member>
        <member name="P:UnitWrappers.System.Threading.IThreadSystem.CurrentThread">
            <summary>
            Gets the currently running thread.
            </summary>
        </member>
        <member name="P:UnitWrappers.System.Threading.IThreadSystem.CurrentContext">
            <summary>
            Gets the current context in which the thread is executing.
            </summary>
            <value>
            A <see cref="T:System.Runtime.Remoting.Contexts.Context"/> representing the current thread context
            </value>
        </member>
        <member name="M:UnitWrappers.System.Threading.ThreadPoolWrap.GetAvailableThreads(System.Int32@,System.Int32@)">
            <inheritdoc />
        </member>
        <member name="T:UnitWrappers.System.Threading.ThreadSystem">
            <summary>
            Wrapper for static members of <see cref="T:System.Threading.Thread"/> class.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Threading.ThreadSystem.Sleep(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Threading.ThreadSystem.Sleep(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Threading.ThreadSystem.CurrentThread">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Threading.ThreadSystem.CurrentContext">
            <inheritdoc />
        </member>
        <member name="T:UnitWrappers.System.Threading.ThreadWrap">
            <summary>
            Wrapper for <see cref="T:System.Threading.Thread"/> class.
            </summary>
        </member>
        <member name="M:UnitWrappers.System.Threading.ThreadWrap.Abort">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Threading.ThreadWrap.SetApartmentState(System.Threading.ApartmentState)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Threading.ThreadWrap.Start">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Threading.ThreadWrap.Start(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:UnitWrappers.System.Threading.ThreadWrap.Join">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Threading.ThreadWrap.CurrentCulture">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Threading.ThreadWrap.CurrentUICulture">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Threading.ThreadWrap.IsAlive">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Threading.ThreadWrap.IsThreadPoolThread">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Threading.ThreadWrap.ThreadState">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Threading.ThreadWrap.IsBackground">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Threading.ThreadWrap.Priority">
            <inheritdoc />
        </member>
        <member name="P:UnitWrappers.System.Threading.ThreadWrap.ManagedThreadId">
            <inheritdoc />
        </member>
        <member name="T:UnitWrappers.System.Threading.WaitHandleWrap">
            <summary>
            Wraps instance of <see cref="T:System.Threading.WaitHandle"/>
            </summary>
        </member>
    </members>
</doc>

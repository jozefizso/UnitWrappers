<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MeasureIt</name>
    </assembly>
    <members>
        <member name="T:MeasureIt.Reportwatch">
             <summary>
             
             </summary>
            <seealso href="http://code.google.com/p/cpp-stopwatch/"/>
        </member>
        <member name="T:MeasureIt.SpeedTestItemInfo">
            <summary>
            User friendly desciptions of test.
            </summary>
        </member>
        <member name="T:MeasureIt.SpeedTestResult`1">
            <summary>
            Rerpesent time measurment of running some method several times, incudes statistical and environment data.
            </summary>
            <typeparam name="TEnvironment">Stores info about environmnet of test (e.g. operatins system version).</typeparam>
        </member>
        <member name="M:MeasureIt.SpeedTestResult`1.#ctor(MeasureIt.SpeedTestItemInfo,System.TimeSpan,System.Int32,`0,System.Int64)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="time"></param>
            <param name="shuffles"></param>
            <param name="environment"></param>
            <param name="repeats">Number of times inner loop was run, used to do right averaging</param>
        </member>
        <member name="T:MeasureIt.SpeedTesting">
            <summary>
            Runs tests shuffled several times in order to make speed tests more statistially indpendant of random fluctioations.
            </summary>
        </member>
        <member name="M:MeasureIt.SpeedTesting.Do(System.IO.TextWriter,System.Int64,System.Linq.Expressions.Expression{System.Action}[])">
            <summary>
            Runs speed tests, shuffles invocation <see cref="F:MeasureIt.SpeedTester.DEFAULT_NUMBER_OF_SHUFFLES"/>,  does reports.
            </summary>
            <param name="output"></param>
            <param name="methodsToTest"></param>
            <param name="repeats">Number for measurable iterations done by inner fast loop. Should return 1 if no repeats is done.</param>
        </member>
        <member name="M:MeasureIt.SpeedTesting.Do(System.IO.TextWriter,System.Int32,System.Int64,System.Linq.Expressions.Expression{System.Action}[])">
            <summary>
            
            </summary>
            <param name="output"></param>
            <param name="shuffles"></param>
            <param name="repeats">Number for measurable iterations done by inner fast loop. Should return 1 if no repeats is done.</param>
            <param name="methodsToTest"></param>
        </member>
        <member name="F:MeasureIt.ReportwatchLangs.Text">
            <summary>
            Default
            </summary>
        </member>
        <member name="T:MeasureIt.FirstCallTester">
            <summary>
            Good to measure scenarios start up scenarios, or when first call can be long, or cache is involved.
            Thread unsafe.
            </summary>
        </member>
        <member name="T:MeasureIt.SpeedTestEnvironment">
            <summary>
            Instance of this class represents environment where test was conducted and 
            atached to test <see cref="!:SpeedTestResult"/>.
            </summary>
            <remarks>
            See <see cref="T:System.Environment"/>.
            </remarks>
        </member>
        <member name="T:MeasureIt.ExpressIt">
            <summary>
            Creates "statically typed" automatically inferred string representations of properties,variables and methods.
            </summary>
            <remarks>
            Degrades performance if called frequently.
            </remarks>
        </member>
        <member name="M:MeasureIt.ExpressIt.WriteLine``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
             Writes expression as variable/property name or method representation with it's string value to console. 
             Appends new line after.
            </summary>
             <example>
             string toWriteLine = "Value";
             ExpressIt.WriteLine(() => toWriteLine); // toWriteLine = Value
             </example>
        </member>
        <member name="M:MeasureIt.ExpressIt.ToRepr``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
             Converts expression to variable/property/method representation adding it's string value.
            </summary>
             <example>
             string toNameValueRepresentation = "Value";
             ToRepr(() => toNameValueRepresentation); // "toNameValueRepresentation = Value"
             </example>
        </member>
        <member name="M:MeasureIt.ExpressIt.ToReprs(System.Linq.Expressions.Expression{System.Func{System.Object}}[])">
            <summary>
             Converts expressions to variable/property/method representations adding its' string values.
             Separates expressions by <see cref="F:MeasureIt.ExpressIt.DEFAULT_ITEMS_DELIMETER"/>.
            </summary>
        </member>
        <member name="M:MeasureIt.ExpressIt.ToName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets property, variable or method name from lambda expression.
            </summary>
            <param name="expression"></param>
            <returns></returns>
            <example>
            var example = "some text";
            var name = toName( () => example);  // "example"
            </example>
        </member>
        <member name="M:MeasureIt.ExpressIt.GetProperties(System.Object)">
            <summary>
            Gets dictionary of string representation of all object's properties.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:MeasureIt.CompositeSpeedTester">
            <summary>
            Runs speed bucket of test several times in order to make speed tests more statistially indpendant of random fluctioations.
            </summary>
        </member>
        <member name="P:MeasureIt.CompositeSpeedTester.Entities">
            <summary>
            Test
            </summary>
        </member>
        <member name="F:MeasureIt.SpeedTester.DEFAULT_NUMBER_OF_SHUFFLES">
            <summary>
            How many times to shuffle and run inner tests.
            </summary>
        </member>
    </members>
</doc>
